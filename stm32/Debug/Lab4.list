
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080027ac  080027ac  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002810  08002810  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002810  08002810  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002810  08002810  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002810  08002810  00012810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002814  08002814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08002888  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08002888  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009761  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001867  00000000  00000000  000297fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  0002b068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  0002b7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017300  00000000  00000000  0002be80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e01  00000000  00000000  00043180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000852ce  00000000  00000000  0004bf81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d124f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000206c  00000000  00000000  000d12a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002794 	.word	0x08002794

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002794 	.word	0x08002794

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <intToStr>:
		HAL_UART_Receive_IT(&huart2, &temp, 1);
	}
}
char str[20];

void intToStr(int num, char*buffer){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	sprintf(buffer,"%d\n",num);
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	4903      	ldr	r1, [pc, #12]	; (8000178 <intToStr+0x1c>)
 800016a:	6838      	ldr	r0, [r7, #0]
 800016c:	f001 fed8 	bl	8001f20 <siprintf>
}
 8000170:	bf00      	nop
 8000172:	3708      	adds	r7, #8
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}
 8000178:	080027ac 	.word	0x080027ac

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000182:	f000 fa75 	bl	8000670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000186:	f000 f835 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018a:	f000 f8eb 	bl	8000364 <MX_GPIO_Init>
  MX_ADC1_Init();
 800018e:	f000 f881 	bl	8000294 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000192:	f000 f8bd 	bl	8000310 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000196:	2201      	movs	r2, #1
 8000198:	4911      	ldr	r1, [pc, #68]	; (80001e0 <main+0x64>)
 800019a:	4812      	ldr	r0, [pc, #72]	; (80001e4 <main+0x68>)
 800019c:	f001 fd33 	bl	8001c06 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t ADC_value = 0;
 80001a0:	2300      	movs	r3, #0
 80001a2:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 80001a4:	2120      	movs	r1, #32
 80001a6:	4810      	ldr	r0, [pc, #64]	; (80001e8 <main+0x6c>)
 80001a8:	f000 ff7c 	bl	80010a4 <HAL_GPIO_TogglePin>
	  ADC_value = HAL_ADC_GetValue(&hadc1);
 80001ac:	480f      	ldr	r0, [pc, #60]	; (80001ec <main+0x70>)
 80001ae:	f000 fbbd 	bl	800092c <HAL_ADC_GetValue>
 80001b2:	6078      	str	r0, [r7, #4]

	  intToStr(ADC_value, str);
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	490e      	ldr	r1, [pc, #56]	; (80001f0 <main+0x74>)
 80001b8:	4618      	mov	r0, r3
 80001ba:	f7ff ffcf 	bl	800015c <intToStr>
	  HAL_UART_Transmit(&huart2, (uint32_t *)str,strlen(str), 1000);
 80001be:	480c      	ldr	r0, [pc, #48]	; (80001f0 <main+0x74>)
 80001c0:	f7ff ffc4 	bl	800014c <strlen>
 80001c4:	4603      	mov	r3, r0
 80001c6:	b29a      	uxth	r2, r3
 80001c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001cc:	4908      	ldr	r1, [pc, #32]	; (80001f0 <main+0x74>)
 80001ce:	4805      	ldr	r0, [pc, #20]	; (80001e4 <main+0x68>)
 80001d0:	f001 fc96 	bl	8001b00 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80001d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001d8:	f000 faac 	bl	8000734 <HAL_Delay>
  {
 80001dc:	e7e2      	b.n	80001a4 <main+0x28>
 80001de:	bf00      	nop
 80001e0:	2000008c 	.word	0x2000008c
 80001e4:	200000cc 	.word	0x200000cc
 80001e8:	40010800 	.word	0x40010800
 80001ec:	2000009c 	.word	0x2000009c
 80001f0:	20000114 	.word	0x20000114

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b094      	sub	sp, #80	; 0x50
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f001 fe84 	bl	8001f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	f107 0314 	add.w	r3, r7, #20
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	605a      	str	r2, [r3, #4]
 8000212:	609a      	str	r2, [r3, #8]
 8000214:	60da      	str	r2, [r3, #12]
 8000216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000224:	2302      	movs	r3, #2
 8000226:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000228:	2301      	movs	r3, #1
 800022a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022c:	2310      	movs	r3, #16
 800022e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000230:	2300      	movs	r3, #0
 8000232:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000238:	4618      	mov	r0, r3
 800023a:	f000 ff4d 	bl	80010d8 <HAL_RCC_OscConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000244:	f000 f8cc 	bl	80003e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000248:	230f      	movs	r3, #15
 800024a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800024c:	2300      	movs	r3, #0
 800024e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800025c:	f107 0314 	add.w	r3, r7, #20
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f001 f9b8 	bl	80015d8 <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800026e:	f000 f8b7 	bl	80003e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000272:	2302      	movs	r3, #2
 8000274:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000276:	2300      	movs	r3, #0
 8000278:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	4618      	mov	r0, r3
 800027e:	f001 fb39 	bl	80018f4 <HAL_RCCEx_PeriphCLKConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000288:	f000 f8aa 	bl	80003e0 <Error_Handler>
  }
}
 800028c:	bf00      	nop
 800028e:	3750      	adds	r7, #80	; 0x50
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002a4:	4b18      	ldr	r3, [pc, #96]	; (8000308 <MX_ADC1_Init+0x74>)
 80002a6:	4a19      	ldr	r2, [pc, #100]	; (800030c <MX_ADC1_Init+0x78>)
 80002a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002aa:	4b17      	ldr	r3, [pc, #92]	; (8000308 <MX_ADC1_Init+0x74>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002b0:	4b15      	ldr	r3, [pc, #84]	; (8000308 <MX_ADC1_Init+0x74>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002b6:	4b14      	ldr	r3, [pc, #80]	; (8000308 <MX_ADC1_Init+0x74>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002bc:	4b12      	ldr	r3, [pc, #72]	; (8000308 <MX_ADC1_Init+0x74>)
 80002be:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c4:	4b10      	ldr	r3, [pc, #64]	; (8000308 <MX_ADC1_Init+0x74>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002ca:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <MX_ADC1_Init+0x74>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <MX_ADC1_Init+0x74>)
 80002d2:	f000 fa53 	bl	800077c <HAL_ADC_Init>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002dc:	f000 f880 	bl	80003e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002e4:	2301      	movs	r3, #1
 80002e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	4619      	mov	r1, r3
 80002f0:	4805      	ldr	r0, [pc, #20]	; (8000308 <MX_ADC1_Init+0x74>)
 80002f2:	f000 fb27 	bl	8000944 <HAL_ADC_ConfigChannel>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002fc:	f000 f870 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	2000009c 	.word	0x2000009c
 800030c:	40012400 	.word	0x40012400

08000310 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000314:	4b11      	ldr	r3, [pc, #68]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000316:	4a12      	ldr	r2, [pc, #72]	; (8000360 <MX_USART2_UART_Init+0x50>)
 8000318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800031a:	4b10      	ldr	r3, [pc, #64]	; (800035c <MX_USART2_UART_Init+0x4c>)
 800031c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000328:	4b0c      	ldr	r3, [pc, #48]	; (800035c <MX_USART2_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000336:	220c      	movs	r2, #12
 8000338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033a:	4b08      	ldr	r3, [pc, #32]	; (800035c <MX_USART2_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000348:	f001 fb8a 	bl	8001a60 <HAL_UART_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000352:	f000 f845 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	200000cc 	.word	0x200000cc
 8000360:	40004400 	.word	0x40004400

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000378:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <MX_GPIO_Init+0x74>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a16      	ldr	r2, [pc, #88]	; (80003d8 <MX_GPIO_Init+0x74>)
 800037e:	f043 0304 	orr.w	r3, r3, #4
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <MX_GPIO_Init+0x74>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0304 	and.w	r3, r3, #4
 800038c:	607b      	str	r3, [r7, #4]
 800038e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2120      	movs	r1, #32
 8000394:	4811      	ldr	r0, [pc, #68]	; (80003dc <MX_GPIO_Init+0x78>)
 8000396:	f000 fe6d 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800039a:	2320      	movs	r3, #32
 800039c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039e:	2301      	movs	r3, #1
 80003a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a6:	2302      	movs	r3, #2
 80003a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	4619      	mov	r1, r3
 80003b0:	480a      	ldr	r0, [pc, #40]	; (80003dc <MX_GPIO_Init+0x78>)
 80003b2:	f000 fce5 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80003b6:	2340      	movs	r3, #64	; 0x40
 80003b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ba:	2302      	movs	r3, #2
 80003bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003be:	2302      	movs	r3, #2
 80003c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c2:	f107 0308 	add.w	r3, r7, #8
 80003c6:	4619      	mov	r1, r3
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_GPIO_Init+0x78>)
 80003ca:	f000 fcd9 	bl	8000d80 <HAL_GPIO_Init>

}
 80003ce:	bf00      	nop
 80003d0:	3718      	adds	r7, #24
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40010800 	.word	0x40010800

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <Error_Handler+0x8>
	...

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <HAL_MspInit+0x5c>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a14      	ldr	r2, [pc, #80]	; (8000448 <HAL_MspInit+0x5c>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6193      	str	r3, [r2, #24]
 80003fe:	4b12      	ldr	r3, [pc, #72]	; (8000448 <HAL_MspInit+0x5c>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <HAL_MspInit+0x5c>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	4a0e      	ldr	r2, [pc, #56]	; (8000448 <HAL_MspInit+0x5c>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000414:	61d3      	str	r3, [r2, #28]
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <HAL_MspInit+0x5c>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <HAL_MspInit+0x60>)
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <HAL_MspInit+0x60>)
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043e:	bf00      	nop
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000
 800044c:	40010000 	.word	0x40010000

08000450 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b088      	sub	sp, #32
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a14      	ldr	r2, [pc, #80]	; (80004bc <HAL_ADC_MspInit+0x6c>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d121      	bne.n	80004b4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <HAL_ADC_MspInit+0x70>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <HAL_ADC_MspInit+0x70>)
 8000476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <HAL_ADC_MspInit+0x70>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000488:	4b0d      	ldr	r3, [pc, #52]	; (80004c0 <HAL_ADC_MspInit+0x70>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <HAL_ADC_MspInit+0x70>)
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <HAL_ADC_MspInit+0x70>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0304 	and.w	r3, r3, #4
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004a0:	2301      	movs	r3, #1
 80004a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a4:	2303      	movs	r3, #3
 80004a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4619      	mov	r1, r3
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <HAL_ADC_MspInit+0x74>)
 80004b0:	f000 fc66 	bl	8000d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004b4:	bf00      	nop
 80004b6:	3720      	adds	r7, #32
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40012400 	.word	0x40012400
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40010800 	.word	0x40010800

080004c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a1b      	ldr	r2, [pc, #108]	; (8000550 <HAL_UART_MspInit+0x88>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d12f      	bne.n	8000548 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004e8:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <HAL_UART_MspInit+0x8c>)
 80004ea:	69db      	ldr	r3, [r3, #28]
 80004ec:	4a19      	ldr	r2, [pc, #100]	; (8000554 <HAL_UART_MspInit+0x8c>)
 80004ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f2:	61d3      	str	r3, [r2, #28]
 80004f4:	4b17      	ldr	r3, [pc, #92]	; (8000554 <HAL_UART_MspInit+0x8c>)
 80004f6:	69db      	ldr	r3, [r3, #28]
 80004f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <HAL_UART_MspInit+0x8c>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a13      	ldr	r2, [pc, #76]	; (8000554 <HAL_UART_MspInit+0x8c>)
 8000506:	f043 0304 	orr.w	r3, r3, #4
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <HAL_UART_MspInit+0x8c>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0304 	and.w	r3, r3, #4
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000518:	2304      	movs	r3, #4
 800051a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051c:	2302      	movs	r3, #2
 800051e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000520:	2303      	movs	r3, #3
 8000522:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	480b      	ldr	r0, [pc, #44]	; (8000558 <HAL_UART_MspInit+0x90>)
 800052c:	f000 fc28 	bl	8000d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000530:	2308      	movs	r3, #8
 8000532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <HAL_UART_MspInit+0x90>)
 8000544:	f000 fc1c 	bl	8000d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40004400 	.word	0x40004400
 8000554:	40021000 	.word	0x40021000
 8000558:	40010800 	.word	0x40010800

0800055c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <NMI_Handler+0x4>

08000562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000566:	e7fe      	b.n	8000566 <HardFault_Handler+0x4>

08000568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056c:	e7fe      	b.n	800056c <MemManage_Handler+0x4>

0800056e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <BusFault_Handler+0x4>

08000574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <UsageFault_Handler+0x4>

0800057a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a2:	f000 f8ab 	bl	80006fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b4:	4a14      	ldr	r2, [pc, #80]	; (8000608 <_sbrk+0x5c>)
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <_sbrk+0x60>)
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <_sbrk+0x64>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d102      	bne.n	80005ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <_sbrk+0x64>)
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <_sbrk+0x68>)
 80005cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <_sbrk+0x64>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d207      	bcs.n	80005ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005dc:	f001 fc6e 	bl	8001ebc <__errno>
 80005e0:	4603      	mov	r3, r0
 80005e2:	220c      	movs	r2, #12
 80005e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	e009      	b.n	8000600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <_sbrk+0x64>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <_sbrk+0x64>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	4a05      	ldr	r2, [pc, #20]	; (8000610 <_sbrk+0x64>)
 80005fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005fe:	68fb      	ldr	r3, [r7, #12]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20002800 	.word	0x20002800
 800060c:	00000400 	.word	0x00000400
 8000610:	20000090 	.word	0x20000090
 8000614:	20000140 	.word	0x20000140

08000618 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000624:	f7ff fff8 	bl	8000618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800062a:	490c      	ldr	r1, [pc, #48]	; (800065c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800062c:	4a0c      	ldr	r2, [pc, #48]	; (8000660 <LoopFillZerobss+0x16>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000630:	e002      	b.n	8000638 <LoopCopyDataInit>

08000632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000636:	3304      	adds	r3, #4

08000638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800063c:	d3f9      	bcc.n	8000632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063e:	4a09      	ldr	r2, [pc, #36]	; (8000664 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000640:	4c09      	ldr	r4, [pc, #36]	; (8000668 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000644:	e001      	b.n	800064a <LoopFillZerobss>

08000646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000648:	3204      	adds	r2, #4

0800064a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800064c:	d3fb      	bcc.n	8000646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800064e:	f001 fc3b 	bl	8001ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000652:	f7ff fd93 	bl	800017c <main>
  bx lr
 8000656:	4770      	bx	lr
  ldr r0, =_sdata
 8000658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800065c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000660:	08002818 	.word	0x08002818
  ldr r2, =_sbss
 8000664:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000668:	2000013c 	.word	0x2000013c

0800066c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800066c:	e7fe      	b.n	800066c <ADC1_2_IRQHandler>
	...

08000670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <HAL_Init+0x28>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_Init+0x28>)
 800067a:	f043 0310 	orr.w	r3, r3, #16
 800067e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000680:	2003      	movs	r0, #3
 8000682:	f000 fb49 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000686:	200f      	movs	r0, #15
 8000688:	f000 f808 	bl	800069c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800068c:	f7ff feae 	bl	80003ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40022000 	.word	0x40022000

0800069c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <HAL_InitTick+0x54>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_InitTick+0x58>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fb53 	bl	8000d66 <HAL_SYSTICK_Config>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e00e      	b.n	80006e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b0f      	cmp	r3, #15
 80006ce:	d80a      	bhi.n	80006e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d0:	2200      	movs	r2, #0
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	f04f 30ff 	mov.w	r0, #4294967295
 80006d8:	f000 fb29 	bl	8000d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <HAL_InitTick+0x5c>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006e2:	2300      	movs	r3, #0
 80006e4:	e000      	b.n	80006e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000008 	.word	0x20000008
 80006f8:	20000004 	.word	0x20000004

080006fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HAL_IncTick+0x1c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	461a      	mov	r2, r3
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <HAL_IncTick+0x20>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4413      	add	r3, r2
 800070c:	4a03      	ldr	r2, [pc, #12]	; (800071c <HAL_IncTick+0x20>)
 800070e:	6013      	str	r3, [r2, #0]
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	20000008 	.word	0x20000008
 800071c:	20000128 	.word	0x20000128

08000720 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return uwTick;
 8000724:	4b02      	ldr	r3, [pc, #8]	; (8000730 <HAL_GetTick+0x10>)
 8000726:	681b      	ldr	r3, [r3, #0]
}
 8000728:	4618      	mov	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	20000128 	.word	0x20000128

08000734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800073c:	f7ff fff0 	bl	8000720 <HAL_GetTick>
 8000740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800074c:	d005      	beq.n	800075a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <HAL_Delay+0x44>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	461a      	mov	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	4413      	add	r3, r2
 8000758:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800075a:	bf00      	nop
 800075c:	f7ff ffe0 	bl	8000720 <HAL_GetTick>
 8000760:	4602      	mov	r2, r0
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	429a      	cmp	r2, r3
 800076a:	d8f7      	bhi.n	800075c <HAL_Delay+0x28>
  {
  }
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000008 	.word	0x20000008

0800077c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000784:	2300      	movs	r3, #0
 8000786:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d101      	bne.n	800079e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e0be      	b.n	800091c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d109      	bne.n	80007c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff fe48 	bl	8000450 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 f9b7 	bl	8000b34 <ADC_ConversionStop_Disable>
 80007c6:	4603      	mov	r3, r0
 80007c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ce:	f003 0310 	and.w	r3, r3, #16
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 8099 	bne.w	800090a <HAL_ADC_Init+0x18e>
 80007d8:	7dfb      	ldrb	r3, [r7, #23]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	f040 8095 	bne.w	800090a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007e8:	f023 0302 	bic.w	r3, r3, #2
 80007ec:	f043 0202 	orr.w	r2, r3, #2
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	7b1b      	ldrb	r3, [r3, #12]
 8000802:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000804:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	4313      	orrs	r3, r2
 800080a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000814:	d003      	beq.n	800081e <HAL_ADC_Init+0xa2>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d102      	bne.n	8000824 <HAL_ADC_Init+0xa8>
 800081e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000822:	e000      	b.n	8000826 <HAL_ADC_Init+0xaa>
 8000824:	2300      	movs	r3, #0
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	4313      	orrs	r3, r2
 800082a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7d1b      	ldrb	r3, [r3, #20]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d119      	bne.n	8000868 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7b1b      	ldrb	r3, [r3, #12]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d109      	bne.n	8000850 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	3b01      	subs	r3, #1
 8000842:	035a      	lsls	r2, r3, #13
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	4313      	orrs	r3, r2
 8000848:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	e00b      	b.n	8000868 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000854:	f043 0220 	orr.w	r2, r3, #32
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000860:	f043 0201 	orr.w	r2, r3, #1
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	430a      	orrs	r2, r1
 800087a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	689a      	ldr	r2, [r3, #8]
 8000882:	4b28      	ldr	r3, [pc, #160]	; (8000924 <HAL_ADC_Init+0x1a8>)
 8000884:	4013      	ands	r3, r2
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	6812      	ldr	r2, [r2, #0]
 800088a:	68b9      	ldr	r1, [r7, #8]
 800088c:	430b      	orrs	r3, r1
 800088e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000898:	d003      	beq.n	80008a2 <HAL_ADC_Init+0x126>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d104      	bne.n	80008ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	051b      	lsls	r3, r3, #20
 80008aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	430a      	orrs	r2, r1
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_ADC_Init+0x1ac>)
 80008c8:	4013      	ands	r3, r2
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d10b      	bne.n	80008e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008da:	f023 0303 	bic.w	r3, r3, #3
 80008de:	f043 0201 	orr.w	r2, r3, #1
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008e6:	e018      	b.n	800091a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ec:	f023 0312 	bic.w	r3, r3, #18
 80008f0:	f043 0210 	orr.w	r2, r3, #16
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fc:	f043 0201 	orr.w	r2, r3, #1
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000904:	2301      	movs	r3, #1
 8000906:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000908:	e007      	b.n	800091a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090e:	f043 0210 	orr.w	r2, r3, #16
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800091a:	7dfb      	ldrb	r3, [r7, #23]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	ffe1f7fd 	.word	0xffe1f7fd
 8000928:	ff1f0efe 	.word	0xff1f0efe

0800092c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800095c:	2b01      	cmp	r3, #1
 800095e:	d101      	bne.n	8000964 <HAL_ADC_ConfigChannel+0x20>
 8000960:	2302      	movs	r3, #2
 8000962:	e0dc      	b.n	8000b1e <HAL_ADC_ConfigChannel+0x1da>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2201      	movs	r2, #1
 8000968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b06      	cmp	r3, #6
 8000972:	d81c      	bhi.n	80009ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685a      	ldr	r2, [r3, #4]
 800097e:	4613      	mov	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	3b05      	subs	r3, #5
 8000986:	221f      	movs	r2, #31
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	4019      	ands	r1, r3
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685a      	ldr	r2, [r3, #4]
 8000998:	4613      	mov	r3, r2
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4413      	add	r3, r2
 800099e:	3b05      	subs	r3, #5
 80009a0:	fa00 f203 	lsl.w	r2, r0, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	430a      	orrs	r2, r1
 80009aa:	635a      	str	r2, [r3, #52]	; 0x34
 80009ac:	e03c      	b.n	8000a28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	2b0c      	cmp	r3, #12
 80009b4:	d81c      	bhi.n	80009f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685a      	ldr	r2, [r3, #4]
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	3b23      	subs	r3, #35	; 0x23
 80009c8:	221f      	movs	r2, #31
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	4019      	ands	r1, r3
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685a      	ldr	r2, [r3, #4]
 80009da:	4613      	mov	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4413      	add	r3, r2
 80009e0:	3b23      	subs	r3, #35	; 0x23
 80009e2:	fa00 f203 	lsl.w	r2, r0, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	430a      	orrs	r2, r1
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
 80009ee:	e01b      	b.n	8000a28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	4613      	mov	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	3b41      	subs	r3, #65	; 0x41
 8000a02:	221f      	movs	r2, #31
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	4019      	ands	r1, r3
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	4613      	mov	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4413      	add	r3, r2
 8000a1a:	3b41      	subs	r3, #65	; 0x41
 8000a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	430a      	orrs	r2, r1
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b09      	cmp	r3, #9
 8000a2e:	d91c      	bls.n	8000a6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	68d9      	ldr	r1, [r3, #12]
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	4413      	add	r3, r2
 8000a40:	3b1e      	subs	r3, #30
 8000a42:	2207      	movs	r2, #7
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	4019      	ands	r1, r3
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	6898      	ldr	r0, [r3, #8]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	3b1e      	subs	r3, #30
 8000a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	430a      	orrs	r2, r1
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	e019      	b.n	8000a9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6919      	ldr	r1, [r3, #16]
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4613      	mov	r3, r2
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	4413      	add	r3, r2
 8000a7a:	2207      	movs	r2, #7
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	43db      	mvns	r3, r3
 8000a82:	4019      	ands	r1, r3
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	6898      	ldr	r0, [r3, #8]
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	fa00 f203 	lsl.w	r2, r0, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b10      	cmp	r3, #16
 8000aa4:	d003      	beq.n	8000aae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000aaa:	2b11      	cmp	r3, #17
 8000aac:	d132      	bne.n	8000b14 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d125      	bne.n	8000b04 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d126      	bne.n	8000b14 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ad4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b10      	cmp	r3, #16
 8000adc:	d11a      	bne.n	8000b14 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <HAL_ADC_ConfigChannel+0x1e8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae8:	0c9a      	lsrs	r2, r3, #18
 8000aea:	4613      	mov	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4413      	add	r3, r2
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000af4:	e002      	b.n	8000afc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1f9      	bne.n	8000af6 <HAL_ADC_ConfigChannel+0x1b2>
 8000b02:	e007      	b.n	8000b14 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b08:	f043 0220 	orr.w	r2, r3, #32
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	40012400 	.word	0x40012400
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	431bde83 	.word	0x431bde83

08000b34 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d12e      	bne.n	8000bac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	689a      	ldr	r2, [r3, #8]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f022 0201 	bic.w	r2, r2, #1
 8000b5c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000b5e:	f7ff fddf 	bl	8000720 <HAL_GetTick>
 8000b62:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b64:	e01b      	b.n	8000b9e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000b66:	f7ff fddb 	bl	8000720 <HAL_GetTick>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d914      	bls.n	8000b9e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d10d      	bne.n	8000b9e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b86:	f043 0210 	orr.w	r2, r3, #16
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b92:	f043 0201 	orr.w	r2, r3, #1
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e007      	b.n	8000bae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d0dc      	beq.n	8000b66 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	; (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	; 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f7ff ff90 	bl	8000c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff49 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff5e 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff90 	bl	8000c70 <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5f 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffb0 	bl	8000cd4 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b08b      	sub	sp, #44	; 0x2c
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d92:	e148      	b.n	8001026 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d94:	2201      	movs	r2, #1
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 8137 	bne.w	8001020 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	4aa3      	ldr	r2, [pc, #652]	; (8001044 <HAL_GPIO_Init+0x2c4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d05e      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000dbc:	4aa1      	ldr	r2, [pc, #644]	; (8001044 <HAL_GPIO_Init+0x2c4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d875      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000dc2:	4aa1      	ldr	r2, [pc, #644]	; (8001048 <HAL_GPIO_Init+0x2c8>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d058      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000dc8:	4a9f      	ldr	r2, [pc, #636]	; (8001048 <HAL_GPIO_Init+0x2c8>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d86f      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000dce:	4a9f      	ldr	r2, [pc, #636]	; (800104c <HAL_GPIO_Init+0x2cc>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d052      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000dd4:	4a9d      	ldr	r2, [pc, #628]	; (800104c <HAL_GPIO_Init+0x2cc>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d869      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000dda:	4a9d      	ldr	r2, [pc, #628]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d04c      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000de0:	4a9b      	ldr	r2, [pc, #620]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d863      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000de6:	4a9b      	ldr	r2, [pc, #620]	; (8001054 <HAL_GPIO_Init+0x2d4>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d046      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000dec:	4a99      	ldr	r2, [pc, #612]	; (8001054 <HAL_GPIO_Init+0x2d4>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d85d      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000df2:	2b12      	cmp	r3, #18
 8000df4:	d82a      	bhi.n	8000e4c <HAL_GPIO_Init+0xcc>
 8000df6:	2b12      	cmp	r3, #18
 8000df8:	d859      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000dfa:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <HAL_GPIO_Init+0x80>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e7b 	.word	0x08000e7b
 8000e04:	08000e55 	.word	0x08000e55
 8000e08:	08000e67 	.word	0x08000e67
 8000e0c:	08000ea9 	.word	0x08000ea9
 8000e10:	08000eaf 	.word	0x08000eaf
 8000e14:	08000eaf 	.word	0x08000eaf
 8000e18:	08000eaf 	.word	0x08000eaf
 8000e1c:	08000eaf 	.word	0x08000eaf
 8000e20:	08000eaf 	.word	0x08000eaf
 8000e24:	08000eaf 	.word	0x08000eaf
 8000e28:	08000eaf 	.word	0x08000eaf
 8000e2c:	08000eaf 	.word	0x08000eaf
 8000e30:	08000eaf 	.word	0x08000eaf
 8000e34:	08000eaf 	.word	0x08000eaf
 8000e38:	08000eaf 	.word	0x08000eaf
 8000e3c:	08000eaf 	.word	0x08000eaf
 8000e40:	08000eaf 	.word	0x08000eaf
 8000e44:	08000e5d 	.word	0x08000e5d
 8000e48:	08000e71 	.word	0x08000e71
 8000e4c:	4a82      	ldr	r2, [pc, #520]	; (8001058 <HAL_GPIO_Init+0x2d8>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d013      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e52:	e02c      	b.n	8000eae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	623b      	str	r3, [r7, #32]
          break;
 8000e5a:	e029      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	3304      	adds	r3, #4
 8000e62:	623b      	str	r3, [r7, #32]
          break;
 8000e64:	e024      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	3308      	adds	r3, #8
 8000e6c:	623b      	str	r3, [r7, #32]
          break;
 8000e6e:	e01f      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	330c      	adds	r3, #12
 8000e76:	623b      	str	r3, [r7, #32]
          break;
 8000e78:	e01a      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d102      	bne.n	8000e88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e82:	2304      	movs	r3, #4
 8000e84:	623b      	str	r3, [r7, #32]
          break;
 8000e86:	e013      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d105      	bne.n	8000e9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e90:	2308      	movs	r3, #8
 8000e92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69fa      	ldr	r2, [r7, #28]
 8000e98:	611a      	str	r2, [r3, #16]
          break;
 8000e9a:	e009      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	615a      	str	r2, [r3, #20]
          break;
 8000ea6:	e003      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
          break;
 8000eac:	e000      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          break;
 8000eae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2bff      	cmp	r3, #255	; 0xff
 8000eb4:	d801      	bhi.n	8000eba <HAL_GPIO_Init+0x13a>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	e001      	b.n	8000ebe <HAL_GPIO_Init+0x13e>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2bff      	cmp	r3, #255	; 0xff
 8000ec4:	d802      	bhi.n	8000ecc <HAL_GPIO_Init+0x14c>
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	e002      	b.n	8000ed2 <HAL_GPIO_Init+0x152>
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	3b08      	subs	r3, #8
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	210f      	movs	r1, #15
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	6a39      	ldr	r1, [r7, #32]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	431a      	orrs	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 8090 	beq.w	8001020 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f00:	4b56      	ldr	r3, [pc, #344]	; (800105c <HAL_GPIO_Init+0x2dc>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a55      	ldr	r2, [pc, #340]	; (800105c <HAL_GPIO_Init+0x2dc>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b53      	ldr	r3, [pc, #332]	; (800105c <HAL_GPIO_Init+0x2dc>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f18:	4a51      	ldr	r2, [pc, #324]	; (8001060 <HAL_GPIO_Init+0x2e0>)
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a49      	ldr	r2, [pc, #292]	; (8001064 <HAL_GPIO_Init+0x2e4>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d00d      	beq.n	8000f60 <HAL_GPIO_Init+0x1e0>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a48      	ldr	r2, [pc, #288]	; (8001068 <HAL_GPIO_Init+0x2e8>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d007      	beq.n	8000f5c <HAL_GPIO_Init+0x1dc>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a47      	ldr	r2, [pc, #284]	; (800106c <HAL_GPIO_Init+0x2ec>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d101      	bne.n	8000f58 <HAL_GPIO_Init+0x1d8>
 8000f54:	2302      	movs	r3, #2
 8000f56:	e004      	b.n	8000f62 <HAL_GPIO_Init+0x1e2>
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e002      	b.n	8000f62 <HAL_GPIO_Init+0x1e2>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <HAL_GPIO_Init+0x1e2>
 8000f60:	2300      	movs	r3, #0
 8000f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f64:	f002 0203 	and.w	r2, r2, #3
 8000f68:	0092      	lsls	r2, r2, #2
 8000f6a:	4093      	lsls	r3, r2
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f72:	493b      	ldr	r1, [pc, #236]	; (8001060 <HAL_GPIO_Init+0x2e0>)
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	3302      	adds	r3, #2
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d006      	beq.n	8000f9a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f8c:	4b38      	ldr	r3, [pc, #224]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	4937      	ldr	r1, [pc, #220]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	608b      	str	r3, [r1, #8]
 8000f98:	e006      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f9a:	4b35      	ldr	r3, [pc, #212]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	4933      	ldr	r1, [pc, #204]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fb4:	4b2e      	ldr	r3, [pc, #184]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	492d      	ldr	r1, [pc, #180]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60cb      	str	r3, [r1, #12]
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fc2:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	4929      	ldr	r1, [pc, #164]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d006      	beq.n	8000fea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	4923      	ldr	r1, [pc, #140]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	604b      	str	r3, [r1, #4]
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	491f      	ldr	r1, [pc, #124]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d006      	beq.n	8001012 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4919      	ldr	r1, [pc, #100]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	600b      	str	r3, [r1, #0]
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	43db      	mvns	r3, r3
 800101a:	4915      	ldr	r1, [pc, #84]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 800101c:	4013      	ands	r3, r2
 800101e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	3301      	adds	r3, #1
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	fa22 f303 	lsr.w	r3, r2, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	f47f aeaf 	bne.w	8000d94 <HAL_GPIO_Init+0x14>
  }
}
 8001036:	bf00      	nop
 8001038:	bf00      	nop
 800103a:	372c      	adds	r7, #44	; 0x2c
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	10320000 	.word	0x10320000
 8001048:	10310000 	.word	0x10310000
 800104c:	10220000 	.word	0x10220000
 8001050:	10210000 	.word	0x10210000
 8001054:	10120000 	.word	0x10120000
 8001058:	10110000 	.word	0x10110000
 800105c:	40021000 	.word	0x40021000
 8001060:	40010000 	.word	0x40010000
 8001064:	40010800 	.word	0x40010800
 8001068:	40010c00 	.word	0x40010c00
 800106c:	40011000 	.word	0x40011000
 8001070:	40010400 	.word	0x40010400

08001074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
 8001080:	4613      	mov	r3, r2
 8001082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001090:	e003      	b.n	800109a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	041a      	lsls	r2, r3, #16
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	611a      	str	r2, [r3, #16]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4013      	ands	r3, r2
 80010bc:	041a      	lsls	r2, r3, #16
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	43d9      	mvns	r1, r3
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	400b      	ands	r3, r1
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	611a      	str	r2, [r3, #16]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
	...

080010d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e26c      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8087 	beq.w	8001206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010f8:	4b92      	ldr	r3, [pc, #584]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b04      	cmp	r3, #4
 8001102:	d00c      	beq.n	800111e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001104:	4b8f      	ldr	r3, [pc, #572]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b08      	cmp	r3, #8
 800110e:	d112      	bne.n	8001136 <HAL_RCC_OscConfig+0x5e>
 8001110:	4b8c      	ldr	r3, [pc, #560]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111c:	d10b      	bne.n	8001136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111e:	4b89      	ldr	r3, [pc, #548]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d06c      	beq.n	8001204 <HAL_RCC_OscConfig+0x12c>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d168      	bne.n	8001204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e246      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113e:	d106      	bne.n	800114e <HAL_RCC_OscConfig+0x76>
 8001140:	4b80      	ldr	r3, [pc, #512]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a7f      	ldr	r2, [pc, #508]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	e02e      	b.n	80011ac <HAL_RCC_OscConfig+0xd4>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0x98>
 8001156:	4b7b      	ldr	r3, [pc, #492]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a7a      	ldr	r2, [pc, #488]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800115c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	4b78      	ldr	r3, [pc, #480]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a77      	ldr	r2, [pc, #476]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e01d      	b.n	80011ac <HAL_RCC_OscConfig+0xd4>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0xbc>
 800117a:	4b72      	ldr	r3, [pc, #456]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a71      	ldr	r2, [pc, #452]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b6f      	ldr	r3, [pc, #444]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a6e      	ldr	r2, [pc, #440]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e00b      	b.n	80011ac <HAL_RCC_OscConfig+0xd4>
 8001194:	4b6b      	ldr	r3, [pc, #428]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a6a      	ldr	r2, [pc, #424]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800119a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b68      	ldr	r3, [pc, #416]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a67      	ldr	r2, [pc, #412]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fab4 	bl	8000720 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fab0 	bl	8000720 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e1fa      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0xe4>
 80011da:	e014      	b.n	8001206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff faa0 	bl	8000720 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fa9c 	bl	8000720 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e1e6      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0x10c>
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d063      	beq.n	80012da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001212:	4b4c      	ldr	r3, [pc, #304]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00b      	beq.n	8001236 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800121e:	4b49      	ldr	r3, [pc, #292]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b08      	cmp	r3, #8
 8001228:	d11c      	bne.n	8001264 <HAL_RCC_OscConfig+0x18c>
 800122a:	4b46      	ldr	r3, [pc, #280]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d116      	bne.n	8001264 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	4b43      	ldr	r3, [pc, #268]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x176>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e1ba      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4939      	ldr	r1, [pc, #228]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800125e:	4313      	orrs	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	e03a      	b.n	80012da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126c:	4b36      	ldr	r3, [pc, #216]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff fa55 	bl	8000720 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff fa51 	bl	8000720 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e19b      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4927      	ldr	r1, [pc, #156]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
 80012ac:	e015      	b.n	80012da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fa34 	bl	8000720 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012bc:	f7ff fa30 	bl	8000720 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e17a      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d03a      	beq.n	800135c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d019      	beq.n	8001322 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_RCC_OscConfig+0x274>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f4:	f7ff fa14 	bl	8000720 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff fa10 	bl	8000720 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e15a      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800131a:	2001      	movs	r0, #1
 800131c:	f000 facc 	bl	80018b8 <RCC_Delay>
 8001320:	e01c      	b.n	800135c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_RCC_OscConfig+0x274>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001328:	f7ff f9fa 	bl	8000720 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132e:	e00f      	b.n	8001350 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001330:	f7ff f9f6 	bl	8000720 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d908      	bls.n	8001350 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e140      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	42420000 	.word	0x42420000
 800134c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	4b9e      	ldr	r3, [pc, #632]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e9      	bne.n	8001330 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80a6 	beq.w	80014b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136e:	4b97      	ldr	r3, [pc, #604]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10d      	bne.n	8001396 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	4b94      	ldr	r3, [pc, #592]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a93      	ldr	r2, [pc, #588]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	61d3      	str	r3, [r2, #28]
 8001386:	4b91      	ldr	r3, [pc, #580]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001392:	2301      	movs	r3, #1
 8001394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001396:	4b8e      	ldr	r3, [pc, #568]	; (80015d0 <HAL_RCC_OscConfig+0x4f8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d118      	bne.n	80013d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a2:	4b8b      	ldr	r3, [pc, #556]	; (80015d0 <HAL_RCC_OscConfig+0x4f8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a8a      	ldr	r2, [pc, #552]	; (80015d0 <HAL_RCC_OscConfig+0x4f8>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ae:	f7ff f9b7 	bl	8000720 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b6:	f7ff f9b3 	bl	8000720 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b64      	cmp	r3, #100	; 0x64
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e0fd      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	4b81      	ldr	r3, [pc, #516]	; (80015d0 <HAL_RCC_OscConfig+0x4f8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x312>
 80013dc:	4b7b      	ldr	r3, [pc, #492]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4a7a      	ldr	r2, [pc, #488]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6213      	str	r3, [r2, #32]
 80013e8:	e02d      	b.n	8001446 <HAL_RCC_OscConfig+0x36e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x334>
 80013f2:	4b76      	ldr	r3, [pc, #472]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4a75      	ldr	r2, [pc, #468]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	6213      	str	r3, [r2, #32]
 80013fe:	4b73      	ldr	r3, [pc, #460]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4a72      	ldr	r2, [pc, #456]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001404:	f023 0304 	bic.w	r3, r3, #4
 8001408:	6213      	str	r3, [r2, #32]
 800140a:	e01c      	b.n	8001446 <HAL_RCC_OscConfig+0x36e>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b05      	cmp	r3, #5
 8001412:	d10c      	bne.n	800142e <HAL_RCC_OscConfig+0x356>
 8001414:	4b6d      	ldr	r3, [pc, #436]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4a6c      	ldr	r2, [pc, #432]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	6213      	str	r3, [r2, #32]
 8001420:	4b6a      	ldr	r3, [pc, #424]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	4a69      	ldr	r2, [pc, #420]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6213      	str	r3, [r2, #32]
 800142c:	e00b      	b.n	8001446 <HAL_RCC_OscConfig+0x36e>
 800142e:	4b67      	ldr	r3, [pc, #412]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4a66      	ldr	r2, [pc, #408]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	6213      	str	r3, [r2, #32]
 800143a:	4b64      	ldr	r3, [pc, #400]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	4a63      	ldr	r2, [pc, #396]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001440:	f023 0304 	bic.w	r3, r3, #4
 8001444:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d015      	beq.n	800147a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff f967 	bl	8000720 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff f963 	bl	8000720 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	f241 3288 	movw	r2, #5000	; 0x1388
 8001464:	4293      	cmp	r3, r2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e0ab      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146c:	4b57      	ldr	r3, [pc, #348]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0ee      	beq.n	8001456 <HAL_RCC_OscConfig+0x37e>
 8001478:	e014      	b.n	80014a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff f951 	bl	8000720 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001480:	e00a      	b.n	8001498 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001482:	f7ff f94d 	bl	8000720 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001490:	4293      	cmp	r3, r2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e095      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001498:	4b4c      	ldr	r3, [pc, #304]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1ee      	bne.n	8001482 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d105      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014aa:	4b48      	ldr	r3, [pc, #288]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a47      	ldr	r2, [pc, #284]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80014b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8081 	beq.w	80015c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c0:	4b42      	ldr	r3, [pc, #264]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d061      	beq.n	8001590 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d146      	bne.n	8001562 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d4:	4b3f      	ldr	r3, [pc, #252]	; (80015d4 <HAL_RCC_OscConfig+0x4fc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff f921 	bl	8000720 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e2:	f7ff f91d 	bl	8000720 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e067      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f4:	4b35      	ldr	r3, [pc, #212]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f0      	bne.n	80014e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001508:	d108      	bne.n	800151c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800150a:	4b30      	ldr	r3, [pc, #192]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	492d      	ldr	r1, [pc, #180]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800151c:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a19      	ldr	r1, [r3, #32]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	430b      	orrs	r3, r1
 800152e:	4927      	ldr	r1, [pc, #156]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <HAL_RCC_OscConfig+0x4fc>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153a:	f7ff f8f1 	bl	8000720 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001542:	f7ff f8ed 	bl	8000720 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e037      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x46a>
 8001560:	e02f      	b.n	80015c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <HAL_RCC_OscConfig+0x4fc>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff f8da 	bl	8000720 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff f8d6 	bl	8000720 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e020      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x498>
 800158e:	e018      	b.n	80015c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e013      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d106      	bne.n	80015be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40007000 	.word	0x40007000
 80015d4:	42420060 	.word	0x42420060

080015d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0d0      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015ec:	4b6a      	ldr	r3, [pc, #424]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d910      	bls.n	800161c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b67      	ldr	r3, [pc, #412]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 0207 	bic.w	r2, r3, #7
 8001602:	4965      	ldr	r1, [pc, #404]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0b8      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001634:	4b59      	ldr	r3, [pc, #356]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	4a58      	ldr	r2, [pc, #352]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800163e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800164c:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001652:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001656:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001658:	4b50      	ldr	r3, [pc, #320]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	494d      	ldr	r1, [pc, #308]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001666:	4313      	orrs	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d040      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b47      	ldr	r3, [pc, #284]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d115      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e07f      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001696:	4b41      	ldr	r3, [pc, #260]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d109      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e073      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e06b      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b6:	4b39      	ldr	r3, [pc, #228]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f023 0203 	bic.w	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4936      	ldr	r1, [pc, #216]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c8:	f7ff f82a 	bl	8000720 <HAL_GetTick>
 80016cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d0:	f7ff f826 	bl	8000720 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e053      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 020c 	and.w	r2, r3, #12
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d1eb      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d210      	bcs.n	8001728 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 0207 	bic.w	r2, r3, #7
 800170e:	4922      	ldr	r1, [pc, #136]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e032      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4916      	ldr	r1, [pc, #88]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	490e      	ldr	r1, [pc, #56]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	4313      	orrs	r3, r2
 8001764:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001766:	f000 f821 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 800176a:	4602      	mov	r2, r0
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	490a      	ldr	r1, [pc, #40]	; (80017a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001778:	5ccb      	ldrb	r3, [r1, r3]
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe ff88 	bl	800069c <HAL_InitTick>

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40022000 	.word	0x40022000
 800179c:	40021000 	.word	0x40021000
 80017a0:	080027b0 	.word	0x080027b0
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017c6:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <HAL_RCC_GetSysClockFreq+0x94>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d002      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0x30>
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0x36>
 80017da:	e027      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_RCC_GetSysClockFreq+0x98>)
 80017de:	613b      	str	r3, [r7, #16]
      break;
 80017e0:	e027      	b.n	8001832 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	0c9b      	lsrs	r3, r3, #18
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	4a17      	ldr	r2, [pc, #92]	; (8001848 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017ec:	5cd3      	ldrb	r3, [r2, r3]
 80017ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d010      	beq.n	800181c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_RCC_GetSysClockFreq+0x94>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	0c5b      	lsrs	r3, r3, #17
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	4a11      	ldr	r2, [pc, #68]	; (800184c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001806:	5cd3      	ldrb	r3, [r2, r3]
 8001808:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <HAL_RCC_GetSysClockFreq+0x98>)
 800180e:	fb02 f203 	mul.w	r2, r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	fbb2 f3f3 	udiv	r3, r2, r3
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e004      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a0c      	ldr	r2, [pc, #48]	; (8001850 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	613b      	str	r3, [r7, #16]
      break;
 800182a:	e002      	b.n	8001832 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_RCC_GetSysClockFreq+0x98>)
 800182e:	613b      	str	r3, [r7, #16]
      break;
 8001830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001832:	693b      	ldr	r3, [r7, #16]
}
 8001834:	4618      	mov	r0, r3
 8001836:	371c      	adds	r7, #28
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	007a1200 	.word	0x007a1200
 8001848:	080027c8 	.word	0x080027c8
 800184c:	080027d8 	.word	0x080027d8
 8001850:	003d0900 	.word	0x003d0900

08001854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001858:	4b02      	ldr	r3, [pc, #8]	; (8001864 <HAL_RCC_GetHCLKFreq+0x10>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	20000000 	.word	0x20000000

08001868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800186c:	f7ff fff2 	bl	8001854 <HAL_RCC_GetHCLKFreq>
 8001870:	4602      	mov	r2, r0
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	0a1b      	lsrs	r3, r3, #8
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	4903      	ldr	r1, [pc, #12]	; (800188c <HAL_RCC_GetPCLK1Freq+0x24>)
 800187e:	5ccb      	ldrb	r3, [r1, r3]
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001884:	4618      	mov	r0, r3
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000
 800188c:	080027c0 	.word	0x080027c0

08001890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001894:	f7ff ffde 	bl	8001854 <HAL_RCC_GetHCLKFreq>
 8001898:	4602      	mov	r2, r0
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	0adb      	lsrs	r3, r3, #11
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	4903      	ldr	r1, [pc, #12]	; (80018b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000
 80018b4:	080027c0 	.word	0x080027c0

080018b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <RCC_Delay+0x34>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <RCC_Delay+0x38>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	0a5b      	lsrs	r3, r3, #9
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018d4:	bf00      	nop
  }
  while (Delay --);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1e5a      	subs	r2, r3, #1
 80018da:	60fa      	str	r2, [r7, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f9      	bne.n	80018d4 <RCC_Delay+0x1c>
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	20000000 	.word	0x20000000
 80018f0:	10624dd3 	.word	0x10624dd3

080018f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d07d      	beq.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001914:	4b4f      	ldr	r3, [pc, #316]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10d      	bne.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001920:	4b4c      	ldr	r3, [pc, #304]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	4a4b      	ldr	r2, [pc, #300]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192a:	61d3      	str	r3, [r2, #28]
 800192c:	4b49      	ldr	r3, [pc, #292]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001938:	2301      	movs	r3, #1
 800193a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193c:	4b46      	ldr	r3, [pc, #280]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d118      	bne.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001948:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a42      	ldr	r2, [pc, #264]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001952:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001954:	f7fe fee4 	bl	8000720 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195a:	e008      	b.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195c:	f7fe fee0 	bl	8000720 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e06d      	b.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196e:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800197a:	4b36      	ldr	r3, [pc, #216]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001982:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d02e      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	429a      	cmp	r2, r3
 8001996:	d027      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001998:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019a2:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019a8:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80019ae:	4a29      	ldr	r2, [pc, #164]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d014      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7fe feaf 	bl	8000720 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c4:	e00a      	b.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7fe feab 	bl	8000720 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e036      	b.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0ee      	beq.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019e8:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	4917      	ldr	r1, [pc, #92]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d105      	bne.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	490b      	ldr	r1, [pc, #44]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	4904      	ldr	r1, [pc, #16]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40007000 	.word	0x40007000
 8001a5c:	42420440 	.word	0x42420440

08001a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e042      	b.n	8001af8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d106      	bne.n	8001a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7fe fd1e 	bl	80004c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2224      	movs	r2, #36	; 0x24
 8001a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f97b 	bl	8001da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b20      	cmp	r3, #32
 8001b1e:	d16d      	bne.n	8001bfc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <HAL_UART_Transmit+0x2c>
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e066      	b.n	8001bfe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2221      	movs	r2, #33	; 0x21
 8001b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b3e:	f7fe fdef 	bl	8000720 <HAL_GetTick>
 8001b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	88fa      	ldrh	r2, [r7, #6]
 8001b48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	88fa      	ldrh	r2, [r7, #6]
 8001b4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b58:	d108      	bne.n	8001b6c <HAL_UART_Transmit+0x6c>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d104      	bne.n	8001b6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	61bb      	str	r3, [r7, #24]
 8001b6a:	e003      	b.n	8001b74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b74:	e02a      	b.n	8001bcc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2180      	movs	r1, #128	; 0x80
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 f865 	bl	8001c50 <UART_WaitOnFlagUntilTimeout>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e036      	b.n	8001bfe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10b      	bne.n	8001bae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ba4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	3302      	adds	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	e007      	b.n	8001bbe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1cf      	bne.n	8001b76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2140      	movs	r1, #64	; 0x40
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 f835 	bl	8001c50 <UART_WaitOnFlagUntilTimeout>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e006      	b.n	8001bfe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e000      	b.n	8001bfe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001bfc:	2302      	movs	r3, #2
  }
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	4613      	mov	r3, r2
 8001c12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d112      	bne.n	8001c46 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_UART_Receive_IT+0x26>
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e00b      	b.n	8001c48 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 f875 	bl	8001d2c <UART_Start_Receive_IT>
 8001c42:	4603      	mov	r3, r0
 8001c44:	e000      	b.n	8001c48 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001c46:	2302      	movs	r3, #2
  }
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b090      	sub	sp, #64	; 0x40
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c60:	e050      	b.n	8001d04 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d04c      	beq.n	8001d04 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c70:	f7fe fd56 	bl	8000720 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d241      	bcs.n	8001d04 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	330c      	adds	r3, #12
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8a:	e853 3f00 	ldrex	r3, [r3]
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	330c      	adds	r3, #12
 8001c9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ca0:	637a      	str	r2, [r7, #52]	; 0x34
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ca4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ca8:	e841 2300 	strex	r3, r2, [r1]
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1e5      	bne.n	8001c80 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3314      	adds	r3, #20
 8001cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	e853 3f00 	ldrex	r3, [r3]
 8001cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	3314      	adds	r3, #20
 8001cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cd4:	623a      	str	r2, [r7, #32]
 8001cd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cd8:	69f9      	ldr	r1, [r7, #28]
 8001cda:	6a3a      	ldr	r2, [r7, #32]
 8001cdc:	e841 2300 	strex	r3, r2, [r1]
 8001ce0:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e5      	bne.n	8001cb4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2220      	movs	r2, #32
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e00f      	b.n	8001d24 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d09f      	beq.n	8001c62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3740      	adds	r7, #64	; 0x40
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	4613      	mov	r3, r2
 8001d38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	88fa      	ldrh	r2, [r7, #6]
 8001d44:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	88fa      	ldrh	r2, [r7, #6]
 8001d4a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2222      	movs	r2, #34	; 0x22
 8001d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d007      	beq.n	8001d72 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d70:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0201 	orr.w	r2, r2, #1
 8001d80:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0220 	orr.w	r2, r2, #32
 8001d90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
	...

08001da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001dda:	f023 030c 	bic.w	r3, r3, #12
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	430b      	orrs	r3, r1
 8001de6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699a      	ldr	r2, [r3, #24]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a2c      	ldr	r2, [pc, #176]	; (8001eb4 <UART_SetConfig+0x114>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d103      	bne.n	8001e10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e08:	f7ff fd42 	bl	8001890 <HAL_RCC_GetPCLK2Freq>
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	e002      	b.n	8001e16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e10:	f7ff fd2a 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 8001e14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009a      	lsls	r2, r3, #2
 8001e20:	441a      	add	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2c:	4a22      	ldr	r2, [pc, #136]	; (8001eb8 <UART_SetConfig+0x118>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	0119      	lsls	r1, r3, #4
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009a      	lsls	r2, r3, #2
 8001e40:	441a      	add	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <UART_SetConfig+0x118>)
 8001e4e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	2064      	movs	r0, #100	; 0x64
 8001e56:	fb00 f303 	mul.w	r3, r0, r3
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	3332      	adds	r3, #50	; 0x32
 8001e60:	4a15      	ldr	r2, [pc, #84]	; (8001eb8 <UART_SetConfig+0x118>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e6c:	4419      	add	r1, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	009a      	lsls	r2, r3, #2
 8001e78:	441a      	add	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <UART_SetConfig+0x118>)
 8001e86:	fba3 0302 	umull	r0, r3, r3, r2
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2064      	movs	r0, #100	; 0x64
 8001e8e:	fb00 f303 	mul.w	r3, r0, r3
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	3332      	adds	r3, #50	; 0x32
 8001e98:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <UART_SetConfig+0x118>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	f003 020f 	and.w	r2, r3, #15
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	440a      	add	r2, r1
 8001eaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40013800 	.word	0x40013800
 8001eb8:	51eb851f 	.word	0x51eb851f

08001ebc <__errno>:
 8001ebc:	4b01      	ldr	r3, [pc, #4]	; (8001ec4 <__errno+0x8>)
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	2000000c 	.word	0x2000000c

08001ec8 <__libc_init_array>:
 8001ec8:	b570      	push	{r4, r5, r6, lr}
 8001eca:	2600      	movs	r6, #0
 8001ecc:	4d0c      	ldr	r5, [pc, #48]	; (8001f00 <__libc_init_array+0x38>)
 8001ece:	4c0d      	ldr	r4, [pc, #52]	; (8001f04 <__libc_init_array+0x3c>)
 8001ed0:	1b64      	subs	r4, r4, r5
 8001ed2:	10a4      	asrs	r4, r4, #2
 8001ed4:	42a6      	cmp	r6, r4
 8001ed6:	d109      	bne.n	8001eec <__libc_init_array+0x24>
 8001ed8:	f000 fc5c 	bl	8002794 <_init>
 8001edc:	2600      	movs	r6, #0
 8001ede:	4d0a      	ldr	r5, [pc, #40]	; (8001f08 <__libc_init_array+0x40>)
 8001ee0:	4c0a      	ldr	r4, [pc, #40]	; (8001f0c <__libc_init_array+0x44>)
 8001ee2:	1b64      	subs	r4, r4, r5
 8001ee4:	10a4      	asrs	r4, r4, #2
 8001ee6:	42a6      	cmp	r6, r4
 8001ee8:	d105      	bne.n	8001ef6 <__libc_init_array+0x2e>
 8001eea:	bd70      	pop	{r4, r5, r6, pc}
 8001eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ef0:	4798      	blx	r3
 8001ef2:	3601      	adds	r6, #1
 8001ef4:	e7ee      	b.n	8001ed4 <__libc_init_array+0xc>
 8001ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001efa:	4798      	blx	r3
 8001efc:	3601      	adds	r6, #1
 8001efe:	e7f2      	b.n	8001ee6 <__libc_init_array+0x1e>
 8001f00:	08002810 	.word	0x08002810
 8001f04:	08002810 	.word	0x08002810
 8001f08:	08002810 	.word	0x08002810
 8001f0c:	08002814 	.word	0x08002814

08001f10 <memset>:
 8001f10:	4603      	mov	r3, r0
 8001f12:	4402      	add	r2, r0
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d100      	bne.n	8001f1a <memset+0xa>
 8001f18:	4770      	bx	lr
 8001f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f1e:	e7f9      	b.n	8001f14 <memset+0x4>

08001f20 <siprintf>:
 8001f20:	b40e      	push	{r1, r2, r3}
 8001f22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001f26:	b500      	push	{lr}
 8001f28:	b09c      	sub	sp, #112	; 0x70
 8001f2a:	ab1d      	add	r3, sp, #116	; 0x74
 8001f2c:	9002      	str	r0, [sp, #8]
 8001f2e:	9006      	str	r0, [sp, #24]
 8001f30:	9107      	str	r1, [sp, #28]
 8001f32:	9104      	str	r1, [sp, #16]
 8001f34:	4808      	ldr	r0, [pc, #32]	; (8001f58 <siprintf+0x38>)
 8001f36:	4909      	ldr	r1, [pc, #36]	; (8001f5c <siprintf+0x3c>)
 8001f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f3c:	9105      	str	r1, [sp, #20]
 8001f3e:	6800      	ldr	r0, [r0, #0]
 8001f40:	a902      	add	r1, sp, #8
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	f000 f868 	bl	8002018 <_svfiprintf_r>
 8001f48:	2200      	movs	r2, #0
 8001f4a:	9b02      	ldr	r3, [sp, #8]
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	b01c      	add	sp, #112	; 0x70
 8001f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f54:	b003      	add	sp, #12
 8001f56:	4770      	bx	lr
 8001f58:	2000000c 	.word	0x2000000c
 8001f5c:	ffff0208 	.word	0xffff0208

08001f60 <__ssputs_r>:
 8001f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f64:	688e      	ldr	r6, [r1, #8]
 8001f66:	4682      	mov	sl, r0
 8001f68:	429e      	cmp	r6, r3
 8001f6a:	460c      	mov	r4, r1
 8001f6c:	4690      	mov	r8, r2
 8001f6e:	461f      	mov	r7, r3
 8001f70:	d838      	bhi.n	8001fe4 <__ssputs_r+0x84>
 8001f72:	898a      	ldrh	r2, [r1, #12]
 8001f74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f78:	d032      	beq.n	8001fe0 <__ssputs_r+0x80>
 8001f7a:	6825      	ldr	r5, [r4, #0]
 8001f7c:	6909      	ldr	r1, [r1, #16]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	eba5 0901 	sub.w	r9, r5, r1
 8001f84:	6965      	ldr	r5, [r4, #20]
 8001f86:	444b      	add	r3, r9
 8001f88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001f90:	106d      	asrs	r5, r5, #1
 8001f92:	429d      	cmp	r5, r3
 8001f94:	bf38      	it	cc
 8001f96:	461d      	movcc	r5, r3
 8001f98:	0553      	lsls	r3, r2, #21
 8001f9a:	d531      	bpl.n	8002000 <__ssputs_r+0xa0>
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	f000 fb53 	bl	8002648 <_malloc_r>
 8001fa2:	4606      	mov	r6, r0
 8001fa4:	b950      	cbnz	r0, 8001fbc <__ssputs_r+0x5c>
 8001fa6:	230c      	movs	r3, #12
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f8ca 3000 	str.w	r3, [sl]
 8001fb0:	89a3      	ldrh	r3, [r4, #12]
 8001fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fb6:	81a3      	strh	r3, [r4, #12]
 8001fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	6921      	ldr	r1, [r4, #16]
 8001fc0:	f000 face 	bl	8002560 <memcpy>
 8001fc4:	89a3      	ldrh	r3, [r4, #12]
 8001fc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fce:	81a3      	strh	r3, [r4, #12]
 8001fd0:	6126      	str	r6, [r4, #16]
 8001fd2:	444e      	add	r6, r9
 8001fd4:	6026      	str	r6, [r4, #0]
 8001fd6:	463e      	mov	r6, r7
 8001fd8:	6165      	str	r5, [r4, #20]
 8001fda:	eba5 0509 	sub.w	r5, r5, r9
 8001fde:	60a5      	str	r5, [r4, #8]
 8001fe0:	42be      	cmp	r6, r7
 8001fe2:	d900      	bls.n	8001fe6 <__ssputs_r+0x86>
 8001fe4:	463e      	mov	r6, r7
 8001fe6:	4632      	mov	r2, r6
 8001fe8:	4641      	mov	r1, r8
 8001fea:	6820      	ldr	r0, [r4, #0]
 8001fec:	f000 fac6 	bl	800257c <memmove>
 8001ff0:	68a3      	ldr	r3, [r4, #8]
 8001ff2:	6822      	ldr	r2, [r4, #0]
 8001ff4:	1b9b      	subs	r3, r3, r6
 8001ff6:	4432      	add	r2, r6
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	60a3      	str	r3, [r4, #8]
 8001ffc:	6022      	str	r2, [r4, #0]
 8001ffe:	e7db      	b.n	8001fb8 <__ssputs_r+0x58>
 8002000:	462a      	mov	r2, r5
 8002002:	f000 fb7b 	bl	80026fc <_realloc_r>
 8002006:	4606      	mov	r6, r0
 8002008:	2800      	cmp	r0, #0
 800200a:	d1e1      	bne.n	8001fd0 <__ssputs_r+0x70>
 800200c:	4650      	mov	r0, sl
 800200e:	6921      	ldr	r1, [r4, #16]
 8002010:	f000 face 	bl	80025b0 <_free_r>
 8002014:	e7c7      	b.n	8001fa6 <__ssputs_r+0x46>
	...

08002018 <_svfiprintf_r>:
 8002018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800201c:	4698      	mov	r8, r3
 800201e:	898b      	ldrh	r3, [r1, #12]
 8002020:	4607      	mov	r7, r0
 8002022:	061b      	lsls	r3, r3, #24
 8002024:	460d      	mov	r5, r1
 8002026:	4614      	mov	r4, r2
 8002028:	b09d      	sub	sp, #116	; 0x74
 800202a:	d50e      	bpl.n	800204a <_svfiprintf_r+0x32>
 800202c:	690b      	ldr	r3, [r1, #16]
 800202e:	b963      	cbnz	r3, 800204a <_svfiprintf_r+0x32>
 8002030:	2140      	movs	r1, #64	; 0x40
 8002032:	f000 fb09 	bl	8002648 <_malloc_r>
 8002036:	6028      	str	r0, [r5, #0]
 8002038:	6128      	str	r0, [r5, #16]
 800203a:	b920      	cbnz	r0, 8002046 <_svfiprintf_r+0x2e>
 800203c:	230c      	movs	r3, #12
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
 8002044:	e0d1      	b.n	80021ea <_svfiprintf_r+0x1d2>
 8002046:	2340      	movs	r3, #64	; 0x40
 8002048:	616b      	str	r3, [r5, #20]
 800204a:	2300      	movs	r3, #0
 800204c:	9309      	str	r3, [sp, #36]	; 0x24
 800204e:	2320      	movs	r3, #32
 8002050:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002054:	2330      	movs	r3, #48	; 0x30
 8002056:	f04f 0901 	mov.w	r9, #1
 800205a:	f8cd 800c 	str.w	r8, [sp, #12]
 800205e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002204 <_svfiprintf_r+0x1ec>
 8002062:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002066:	4623      	mov	r3, r4
 8002068:	469a      	mov	sl, r3
 800206a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800206e:	b10a      	cbz	r2, 8002074 <_svfiprintf_r+0x5c>
 8002070:	2a25      	cmp	r2, #37	; 0x25
 8002072:	d1f9      	bne.n	8002068 <_svfiprintf_r+0x50>
 8002074:	ebba 0b04 	subs.w	fp, sl, r4
 8002078:	d00b      	beq.n	8002092 <_svfiprintf_r+0x7a>
 800207a:	465b      	mov	r3, fp
 800207c:	4622      	mov	r2, r4
 800207e:	4629      	mov	r1, r5
 8002080:	4638      	mov	r0, r7
 8002082:	f7ff ff6d 	bl	8001f60 <__ssputs_r>
 8002086:	3001      	adds	r0, #1
 8002088:	f000 80aa 	beq.w	80021e0 <_svfiprintf_r+0x1c8>
 800208c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800208e:	445a      	add	r2, fp
 8002090:	9209      	str	r2, [sp, #36]	; 0x24
 8002092:	f89a 3000 	ldrb.w	r3, [sl]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80a2 	beq.w	80021e0 <_svfiprintf_r+0x1c8>
 800209c:	2300      	movs	r3, #0
 800209e:	f04f 32ff 	mov.w	r2, #4294967295
 80020a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020a6:	f10a 0a01 	add.w	sl, sl, #1
 80020aa:	9304      	str	r3, [sp, #16]
 80020ac:	9307      	str	r3, [sp, #28]
 80020ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020b2:	931a      	str	r3, [sp, #104]	; 0x68
 80020b4:	4654      	mov	r4, sl
 80020b6:	2205      	movs	r2, #5
 80020b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020bc:	4851      	ldr	r0, [pc, #324]	; (8002204 <_svfiprintf_r+0x1ec>)
 80020be:	f000 fa41 	bl	8002544 <memchr>
 80020c2:	9a04      	ldr	r2, [sp, #16]
 80020c4:	b9d8      	cbnz	r0, 80020fe <_svfiprintf_r+0xe6>
 80020c6:	06d0      	lsls	r0, r2, #27
 80020c8:	bf44      	itt	mi
 80020ca:	2320      	movmi	r3, #32
 80020cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020d0:	0711      	lsls	r1, r2, #28
 80020d2:	bf44      	itt	mi
 80020d4:	232b      	movmi	r3, #43	; 0x2b
 80020d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020da:	f89a 3000 	ldrb.w	r3, [sl]
 80020de:	2b2a      	cmp	r3, #42	; 0x2a
 80020e0:	d015      	beq.n	800210e <_svfiprintf_r+0xf6>
 80020e2:	4654      	mov	r4, sl
 80020e4:	2000      	movs	r0, #0
 80020e6:	f04f 0c0a 	mov.w	ip, #10
 80020ea:	9a07      	ldr	r2, [sp, #28]
 80020ec:	4621      	mov	r1, r4
 80020ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020f2:	3b30      	subs	r3, #48	; 0x30
 80020f4:	2b09      	cmp	r3, #9
 80020f6:	d94e      	bls.n	8002196 <_svfiprintf_r+0x17e>
 80020f8:	b1b0      	cbz	r0, 8002128 <_svfiprintf_r+0x110>
 80020fa:	9207      	str	r2, [sp, #28]
 80020fc:	e014      	b.n	8002128 <_svfiprintf_r+0x110>
 80020fe:	eba0 0308 	sub.w	r3, r0, r8
 8002102:	fa09 f303 	lsl.w	r3, r9, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	46a2      	mov	sl, r4
 800210a:	9304      	str	r3, [sp, #16]
 800210c:	e7d2      	b.n	80020b4 <_svfiprintf_r+0x9c>
 800210e:	9b03      	ldr	r3, [sp, #12]
 8002110:	1d19      	adds	r1, r3, #4
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	9103      	str	r1, [sp, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	bfbb      	ittet	lt
 800211a:	425b      	neglt	r3, r3
 800211c:	f042 0202 	orrlt.w	r2, r2, #2
 8002120:	9307      	strge	r3, [sp, #28]
 8002122:	9307      	strlt	r3, [sp, #28]
 8002124:	bfb8      	it	lt
 8002126:	9204      	strlt	r2, [sp, #16]
 8002128:	7823      	ldrb	r3, [r4, #0]
 800212a:	2b2e      	cmp	r3, #46	; 0x2e
 800212c:	d10c      	bne.n	8002148 <_svfiprintf_r+0x130>
 800212e:	7863      	ldrb	r3, [r4, #1]
 8002130:	2b2a      	cmp	r3, #42	; 0x2a
 8002132:	d135      	bne.n	80021a0 <_svfiprintf_r+0x188>
 8002134:	9b03      	ldr	r3, [sp, #12]
 8002136:	3402      	adds	r4, #2
 8002138:	1d1a      	adds	r2, r3, #4
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	9203      	str	r2, [sp, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	bfb8      	it	lt
 8002142:	f04f 33ff 	movlt.w	r3, #4294967295
 8002146:	9305      	str	r3, [sp, #20]
 8002148:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002214 <_svfiprintf_r+0x1fc>
 800214c:	2203      	movs	r2, #3
 800214e:	4650      	mov	r0, sl
 8002150:	7821      	ldrb	r1, [r4, #0]
 8002152:	f000 f9f7 	bl	8002544 <memchr>
 8002156:	b140      	cbz	r0, 800216a <_svfiprintf_r+0x152>
 8002158:	2340      	movs	r3, #64	; 0x40
 800215a:	eba0 000a 	sub.w	r0, r0, sl
 800215e:	fa03 f000 	lsl.w	r0, r3, r0
 8002162:	9b04      	ldr	r3, [sp, #16]
 8002164:	3401      	adds	r4, #1
 8002166:	4303      	orrs	r3, r0
 8002168:	9304      	str	r3, [sp, #16]
 800216a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800216e:	2206      	movs	r2, #6
 8002170:	4825      	ldr	r0, [pc, #148]	; (8002208 <_svfiprintf_r+0x1f0>)
 8002172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002176:	f000 f9e5 	bl	8002544 <memchr>
 800217a:	2800      	cmp	r0, #0
 800217c:	d038      	beq.n	80021f0 <_svfiprintf_r+0x1d8>
 800217e:	4b23      	ldr	r3, [pc, #140]	; (800220c <_svfiprintf_r+0x1f4>)
 8002180:	bb1b      	cbnz	r3, 80021ca <_svfiprintf_r+0x1b2>
 8002182:	9b03      	ldr	r3, [sp, #12]
 8002184:	3307      	adds	r3, #7
 8002186:	f023 0307 	bic.w	r3, r3, #7
 800218a:	3308      	adds	r3, #8
 800218c:	9303      	str	r3, [sp, #12]
 800218e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002190:	4433      	add	r3, r6
 8002192:	9309      	str	r3, [sp, #36]	; 0x24
 8002194:	e767      	b.n	8002066 <_svfiprintf_r+0x4e>
 8002196:	460c      	mov	r4, r1
 8002198:	2001      	movs	r0, #1
 800219a:	fb0c 3202 	mla	r2, ip, r2, r3
 800219e:	e7a5      	b.n	80020ec <_svfiprintf_r+0xd4>
 80021a0:	2300      	movs	r3, #0
 80021a2:	f04f 0c0a 	mov.w	ip, #10
 80021a6:	4619      	mov	r1, r3
 80021a8:	3401      	adds	r4, #1
 80021aa:	9305      	str	r3, [sp, #20]
 80021ac:	4620      	mov	r0, r4
 80021ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021b2:	3a30      	subs	r2, #48	; 0x30
 80021b4:	2a09      	cmp	r2, #9
 80021b6:	d903      	bls.n	80021c0 <_svfiprintf_r+0x1a8>
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0c5      	beq.n	8002148 <_svfiprintf_r+0x130>
 80021bc:	9105      	str	r1, [sp, #20]
 80021be:	e7c3      	b.n	8002148 <_svfiprintf_r+0x130>
 80021c0:	4604      	mov	r4, r0
 80021c2:	2301      	movs	r3, #1
 80021c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80021c8:	e7f0      	b.n	80021ac <_svfiprintf_r+0x194>
 80021ca:	ab03      	add	r3, sp, #12
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	462a      	mov	r2, r5
 80021d0:	4638      	mov	r0, r7
 80021d2:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <_svfiprintf_r+0x1f8>)
 80021d4:	a904      	add	r1, sp, #16
 80021d6:	f3af 8000 	nop.w
 80021da:	1c42      	adds	r2, r0, #1
 80021dc:	4606      	mov	r6, r0
 80021de:	d1d6      	bne.n	800218e <_svfiprintf_r+0x176>
 80021e0:	89ab      	ldrh	r3, [r5, #12]
 80021e2:	065b      	lsls	r3, r3, #25
 80021e4:	f53f af2c 	bmi.w	8002040 <_svfiprintf_r+0x28>
 80021e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021ea:	b01d      	add	sp, #116	; 0x74
 80021ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021f0:	ab03      	add	r3, sp, #12
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	462a      	mov	r2, r5
 80021f6:	4638      	mov	r0, r7
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <_svfiprintf_r+0x1f8>)
 80021fa:	a904      	add	r1, sp, #16
 80021fc:	f000 f87c 	bl	80022f8 <_printf_i>
 8002200:	e7eb      	b.n	80021da <_svfiprintf_r+0x1c2>
 8002202:	bf00      	nop
 8002204:	080027da 	.word	0x080027da
 8002208:	080027e4 	.word	0x080027e4
 800220c:	00000000 	.word	0x00000000
 8002210:	08001f61 	.word	0x08001f61
 8002214:	080027e0 	.word	0x080027e0

08002218 <_printf_common>:
 8002218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800221c:	4616      	mov	r6, r2
 800221e:	4699      	mov	r9, r3
 8002220:	688a      	ldr	r2, [r1, #8]
 8002222:	690b      	ldr	r3, [r1, #16]
 8002224:	4607      	mov	r7, r0
 8002226:	4293      	cmp	r3, r2
 8002228:	bfb8      	it	lt
 800222a:	4613      	movlt	r3, r2
 800222c:	6033      	str	r3, [r6, #0]
 800222e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002232:	460c      	mov	r4, r1
 8002234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002238:	b10a      	cbz	r2, 800223e <_printf_common+0x26>
 800223a:	3301      	adds	r3, #1
 800223c:	6033      	str	r3, [r6, #0]
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	0699      	lsls	r1, r3, #26
 8002242:	bf42      	ittt	mi
 8002244:	6833      	ldrmi	r3, [r6, #0]
 8002246:	3302      	addmi	r3, #2
 8002248:	6033      	strmi	r3, [r6, #0]
 800224a:	6825      	ldr	r5, [r4, #0]
 800224c:	f015 0506 	ands.w	r5, r5, #6
 8002250:	d106      	bne.n	8002260 <_printf_common+0x48>
 8002252:	f104 0a19 	add.w	sl, r4, #25
 8002256:	68e3      	ldr	r3, [r4, #12]
 8002258:	6832      	ldr	r2, [r6, #0]
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	42ab      	cmp	r3, r5
 800225e:	dc28      	bgt.n	80022b2 <_printf_common+0x9a>
 8002260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002264:	1e13      	subs	r3, r2, #0
 8002266:	6822      	ldr	r2, [r4, #0]
 8002268:	bf18      	it	ne
 800226a:	2301      	movne	r3, #1
 800226c:	0692      	lsls	r2, r2, #26
 800226e:	d42d      	bmi.n	80022cc <_printf_common+0xb4>
 8002270:	4649      	mov	r1, r9
 8002272:	4638      	mov	r0, r7
 8002274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002278:	47c0      	blx	r8
 800227a:	3001      	adds	r0, #1
 800227c:	d020      	beq.n	80022c0 <_printf_common+0xa8>
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	68e5      	ldr	r5, [r4, #12]
 8002282:	f003 0306 	and.w	r3, r3, #6
 8002286:	2b04      	cmp	r3, #4
 8002288:	bf18      	it	ne
 800228a:	2500      	movne	r5, #0
 800228c:	6832      	ldr	r2, [r6, #0]
 800228e:	f04f 0600 	mov.w	r6, #0
 8002292:	68a3      	ldr	r3, [r4, #8]
 8002294:	bf08      	it	eq
 8002296:	1aad      	subeq	r5, r5, r2
 8002298:	6922      	ldr	r2, [r4, #16]
 800229a:	bf08      	it	eq
 800229c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022a0:	4293      	cmp	r3, r2
 80022a2:	bfc4      	itt	gt
 80022a4:	1a9b      	subgt	r3, r3, r2
 80022a6:	18ed      	addgt	r5, r5, r3
 80022a8:	341a      	adds	r4, #26
 80022aa:	42b5      	cmp	r5, r6
 80022ac:	d11a      	bne.n	80022e4 <_printf_common+0xcc>
 80022ae:	2000      	movs	r0, #0
 80022b0:	e008      	b.n	80022c4 <_printf_common+0xac>
 80022b2:	2301      	movs	r3, #1
 80022b4:	4652      	mov	r2, sl
 80022b6:	4649      	mov	r1, r9
 80022b8:	4638      	mov	r0, r7
 80022ba:	47c0      	blx	r8
 80022bc:	3001      	adds	r0, #1
 80022be:	d103      	bne.n	80022c8 <_printf_common+0xb0>
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022c8:	3501      	adds	r5, #1
 80022ca:	e7c4      	b.n	8002256 <_printf_common+0x3e>
 80022cc:	2030      	movs	r0, #48	; 0x30
 80022ce:	18e1      	adds	r1, r4, r3
 80022d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80022da:	4422      	add	r2, r4
 80022dc:	3302      	adds	r3, #2
 80022de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022e2:	e7c5      	b.n	8002270 <_printf_common+0x58>
 80022e4:	2301      	movs	r3, #1
 80022e6:	4622      	mov	r2, r4
 80022e8:	4649      	mov	r1, r9
 80022ea:	4638      	mov	r0, r7
 80022ec:	47c0      	blx	r8
 80022ee:	3001      	adds	r0, #1
 80022f0:	d0e6      	beq.n	80022c0 <_printf_common+0xa8>
 80022f2:	3601      	adds	r6, #1
 80022f4:	e7d9      	b.n	80022aa <_printf_common+0x92>
	...

080022f8 <_printf_i>:
 80022f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022fc:	460c      	mov	r4, r1
 80022fe:	7e27      	ldrb	r7, [r4, #24]
 8002300:	4691      	mov	r9, r2
 8002302:	2f78      	cmp	r7, #120	; 0x78
 8002304:	4680      	mov	r8, r0
 8002306:	469a      	mov	sl, r3
 8002308:	990c      	ldr	r1, [sp, #48]	; 0x30
 800230a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800230e:	d807      	bhi.n	8002320 <_printf_i+0x28>
 8002310:	2f62      	cmp	r7, #98	; 0x62
 8002312:	d80a      	bhi.n	800232a <_printf_i+0x32>
 8002314:	2f00      	cmp	r7, #0
 8002316:	f000 80d9 	beq.w	80024cc <_printf_i+0x1d4>
 800231a:	2f58      	cmp	r7, #88	; 0x58
 800231c:	f000 80a4 	beq.w	8002468 <_printf_i+0x170>
 8002320:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002328:	e03a      	b.n	80023a0 <_printf_i+0xa8>
 800232a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800232e:	2b15      	cmp	r3, #21
 8002330:	d8f6      	bhi.n	8002320 <_printf_i+0x28>
 8002332:	a001      	add	r0, pc, #4	; (adr r0, 8002338 <_printf_i+0x40>)
 8002334:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002338:	08002391 	.word	0x08002391
 800233c:	080023a5 	.word	0x080023a5
 8002340:	08002321 	.word	0x08002321
 8002344:	08002321 	.word	0x08002321
 8002348:	08002321 	.word	0x08002321
 800234c:	08002321 	.word	0x08002321
 8002350:	080023a5 	.word	0x080023a5
 8002354:	08002321 	.word	0x08002321
 8002358:	08002321 	.word	0x08002321
 800235c:	08002321 	.word	0x08002321
 8002360:	08002321 	.word	0x08002321
 8002364:	080024b3 	.word	0x080024b3
 8002368:	080023d5 	.word	0x080023d5
 800236c:	08002495 	.word	0x08002495
 8002370:	08002321 	.word	0x08002321
 8002374:	08002321 	.word	0x08002321
 8002378:	080024d5 	.word	0x080024d5
 800237c:	08002321 	.word	0x08002321
 8002380:	080023d5 	.word	0x080023d5
 8002384:	08002321 	.word	0x08002321
 8002388:	08002321 	.word	0x08002321
 800238c:	0800249d 	.word	0x0800249d
 8002390:	680b      	ldr	r3, [r1, #0]
 8002392:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002396:	1d1a      	adds	r2, r3, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	600a      	str	r2, [r1, #0]
 800239c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0a4      	b.n	80024ee <_printf_i+0x1f6>
 80023a4:	6825      	ldr	r5, [r4, #0]
 80023a6:	6808      	ldr	r0, [r1, #0]
 80023a8:	062e      	lsls	r6, r5, #24
 80023aa:	f100 0304 	add.w	r3, r0, #4
 80023ae:	d50a      	bpl.n	80023c6 <_printf_i+0xce>
 80023b0:	6805      	ldr	r5, [r0, #0]
 80023b2:	600b      	str	r3, [r1, #0]
 80023b4:	2d00      	cmp	r5, #0
 80023b6:	da03      	bge.n	80023c0 <_printf_i+0xc8>
 80023b8:	232d      	movs	r3, #45	; 0x2d
 80023ba:	426d      	negs	r5, r5
 80023bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023c0:	230a      	movs	r3, #10
 80023c2:	485e      	ldr	r0, [pc, #376]	; (800253c <_printf_i+0x244>)
 80023c4:	e019      	b.n	80023fa <_printf_i+0x102>
 80023c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80023ca:	6805      	ldr	r5, [r0, #0]
 80023cc:	600b      	str	r3, [r1, #0]
 80023ce:	bf18      	it	ne
 80023d0:	b22d      	sxthne	r5, r5
 80023d2:	e7ef      	b.n	80023b4 <_printf_i+0xbc>
 80023d4:	680b      	ldr	r3, [r1, #0]
 80023d6:	6825      	ldr	r5, [r4, #0]
 80023d8:	1d18      	adds	r0, r3, #4
 80023da:	6008      	str	r0, [r1, #0]
 80023dc:	0628      	lsls	r0, r5, #24
 80023de:	d501      	bpl.n	80023e4 <_printf_i+0xec>
 80023e0:	681d      	ldr	r5, [r3, #0]
 80023e2:	e002      	b.n	80023ea <_printf_i+0xf2>
 80023e4:	0669      	lsls	r1, r5, #25
 80023e6:	d5fb      	bpl.n	80023e0 <_printf_i+0xe8>
 80023e8:	881d      	ldrh	r5, [r3, #0]
 80023ea:	2f6f      	cmp	r7, #111	; 0x6f
 80023ec:	bf0c      	ite	eq
 80023ee:	2308      	moveq	r3, #8
 80023f0:	230a      	movne	r3, #10
 80023f2:	4852      	ldr	r0, [pc, #328]	; (800253c <_printf_i+0x244>)
 80023f4:	2100      	movs	r1, #0
 80023f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80023fa:	6866      	ldr	r6, [r4, #4]
 80023fc:	2e00      	cmp	r6, #0
 80023fe:	bfa8      	it	ge
 8002400:	6821      	ldrge	r1, [r4, #0]
 8002402:	60a6      	str	r6, [r4, #8]
 8002404:	bfa4      	itt	ge
 8002406:	f021 0104 	bicge.w	r1, r1, #4
 800240a:	6021      	strge	r1, [r4, #0]
 800240c:	b90d      	cbnz	r5, 8002412 <_printf_i+0x11a>
 800240e:	2e00      	cmp	r6, #0
 8002410:	d04d      	beq.n	80024ae <_printf_i+0x1b6>
 8002412:	4616      	mov	r6, r2
 8002414:	fbb5 f1f3 	udiv	r1, r5, r3
 8002418:	fb03 5711 	mls	r7, r3, r1, r5
 800241c:	5dc7      	ldrb	r7, [r0, r7]
 800241e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002422:	462f      	mov	r7, r5
 8002424:	42bb      	cmp	r3, r7
 8002426:	460d      	mov	r5, r1
 8002428:	d9f4      	bls.n	8002414 <_printf_i+0x11c>
 800242a:	2b08      	cmp	r3, #8
 800242c:	d10b      	bne.n	8002446 <_printf_i+0x14e>
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	07df      	lsls	r7, r3, #31
 8002432:	d508      	bpl.n	8002446 <_printf_i+0x14e>
 8002434:	6923      	ldr	r3, [r4, #16]
 8002436:	6861      	ldr	r1, [r4, #4]
 8002438:	4299      	cmp	r1, r3
 800243a:	bfde      	ittt	le
 800243c:	2330      	movle	r3, #48	; 0x30
 800243e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002442:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002446:	1b92      	subs	r2, r2, r6
 8002448:	6122      	str	r2, [r4, #16]
 800244a:	464b      	mov	r3, r9
 800244c:	4621      	mov	r1, r4
 800244e:	4640      	mov	r0, r8
 8002450:	f8cd a000 	str.w	sl, [sp]
 8002454:	aa03      	add	r2, sp, #12
 8002456:	f7ff fedf 	bl	8002218 <_printf_common>
 800245a:	3001      	adds	r0, #1
 800245c:	d14c      	bne.n	80024f8 <_printf_i+0x200>
 800245e:	f04f 30ff 	mov.w	r0, #4294967295
 8002462:	b004      	add	sp, #16
 8002464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002468:	4834      	ldr	r0, [pc, #208]	; (800253c <_printf_i+0x244>)
 800246a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800246e:	680e      	ldr	r6, [r1, #0]
 8002470:	6823      	ldr	r3, [r4, #0]
 8002472:	f856 5b04 	ldr.w	r5, [r6], #4
 8002476:	061f      	lsls	r7, r3, #24
 8002478:	600e      	str	r6, [r1, #0]
 800247a:	d514      	bpl.n	80024a6 <_printf_i+0x1ae>
 800247c:	07d9      	lsls	r1, r3, #31
 800247e:	bf44      	itt	mi
 8002480:	f043 0320 	orrmi.w	r3, r3, #32
 8002484:	6023      	strmi	r3, [r4, #0]
 8002486:	b91d      	cbnz	r5, 8002490 <_printf_i+0x198>
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	f023 0320 	bic.w	r3, r3, #32
 800248e:	6023      	str	r3, [r4, #0]
 8002490:	2310      	movs	r3, #16
 8002492:	e7af      	b.n	80023f4 <_printf_i+0xfc>
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	f043 0320 	orr.w	r3, r3, #32
 800249a:	6023      	str	r3, [r4, #0]
 800249c:	2378      	movs	r3, #120	; 0x78
 800249e:	4828      	ldr	r0, [pc, #160]	; (8002540 <_printf_i+0x248>)
 80024a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80024a4:	e7e3      	b.n	800246e <_printf_i+0x176>
 80024a6:	065e      	lsls	r6, r3, #25
 80024a8:	bf48      	it	mi
 80024aa:	b2ad      	uxthmi	r5, r5
 80024ac:	e7e6      	b.n	800247c <_printf_i+0x184>
 80024ae:	4616      	mov	r6, r2
 80024b0:	e7bb      	b.n	800242a <_printf_i+0x132>
 80024b2:	680b      	ldr	r3, [r1, #0]
 80024b4:	6826      	ldr	r6, [r4, #0]
 80024b6:	1d1d      	adds	r5, r3, #4
 80024b8:	6960      	ldr	r0, [r4, #20]
 80024ba:	600d      	str	r5, [r1, #0]
 80024bc:	0635      	lsls	r5, r6, #24
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	d501      	bpl.n	80024c6 <_printf_i+0x1ce>
 80024c2:	6018      	str	r0, [r3, #0]
 80024c4:	e002      	b.n	80024cc <_printf_i+0x1d4>
 80024c6:	0671      	lsls	r1, r6, #25
 80024c8:	d5fb      	bpl.n	80024c2 <_printf_i+0x1ca>
 80024ca:	8018      	strh	r0, [r3, #0]
 80024cc:	2300      	movs	r3, #0
 80024ce:	4616      	mov	r6, r2
 80024d0:	6123      	str	r3, [r4, #16]
 80024d2:	e7ba      	b.n	800244a <_printf_i+0x152>
 80024d4:	680b      	ldr	r3, [r1, #0]
 80024d6:	1d1a      	adds	r2, r3, #4
 80024d8:	600a      	str	r2, [r1, #0]
 80024da:	681e      	ldr	r6, [r3, #0]
 80024dc:	2100      	movs	r1, #0
 80024de:	4630      	mov	r0, r6
 80024e0:	6862      	ldr	r2, [r4, #4]
 80024e2:	f000 f82f 	bl	8002544 <memchr>
 80024e6:	b108      	cbz	r0, 80024ec <_printf_i+0x1f4>
 80024e8:	1b80      	subs	r0, r0, r6
 80024ea:	6060      	str	r0, [r4, #4]
 80024ec:	6863      	ldr	r3, [r4, #4]
 80024ee:	6123      	str	r3, [r4, #16]
 80024f0:	2300      	movs	r3, #0
 80024f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024f6:	e7a8      	b.n	800244a <_printf_i+0x152>
 80024f8:	4632      	mov	r2, r6
 80024fa:	4649      	mov	r1, r9
 80024fc:	4640      	mov	r0, r8
 80024fe:	6923      	ldr	r3, [r4, #16]
 8002500:	47d0      	blx	sl
 8002502:	3001      	adds	r0, #1
 8002504:	d0ab      	beq.n	800245e <_printf_i+0x166>
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	079b      	lsls	r3, r3, #30
 800250a:	d413      	bmi.n	8002534 <_printf_i+0x23c>
 800250c:	68e0      	ldr	r0, [r4, #12]
 800250e:	9b03      	ldr	r3, [sp, #12]
 8002510:	4298      	cmp	r0, r3
 8002512:	bfb8      	it	lt
 8002514:	4618      	movlt	r0, r3
 8002516:	e7a4      	b.n	8002462 <_printf_i+0x16a>
 8002518:	2301      	movs	r3, #1
 800251a:	4632      	mov	r2, r6
 800251c:	4649      	mov	r1, r9
 800251e:	4640      	mov	r0, r8
 8002520:	47d0      	blx	sl
 8002522:	3001      	adds	r0, #1
 8002524:	d09b      	beq.n	800245e <_printf_i+0x166>
 8002526:	3501      	adds	r5, #1
 8002528:	68e3      	ldr	r3, [r4, #12]
 800252a:	9903      	ldr	r1, [sp, #12]
 800252c:	1a5b      	subs	r3, r3, r1
 800252e:	42ab      	cmp	r3, r5
 8002530:	dcf2      	bgt.n	8002518 <_printf_i+0x220>
 8002532:	e7eb      	b.n	800250c <_printf_i+0x214>
 8002534:	2500      	movs	r5, #0
 8002536:	f104 0619 	add.w	r6, r4, #25
 800253a:	e7f5      	b.n	8002528 <_printf_i+0x230>
 800253c:	080027eb 	.word	0x080027eb
 8002540:	080027fc 	.word	0x080027fc

08002544 <memchr>:
 8002544:	4603      	mov	r3, r0
 8002546:	b510      	push	{r4, lr}
 8002548:	b2c9      	uxtb	r1, r1
 800254a:	4402      	add	r2, r0
 800254c:	4293      	cmp	r3, r2
 800254e:	4618      	mov	r0, r3
 8002550:	d101      	bne.n	8002556 <memchr+0x12>
 8002552:	2000      	movs	r0, #0
 8002554:	e003      	b.n	800255e <memchr+0x1a>
 8002556:	7804      	ldrb	r4, [r0, #0]
 8002558:	3301      	adds	r3, #1
 800255a:	428c      	cmp	r4, r1
 800255c:	d1f6      	bne.n	800254c <memchr+0x8>
 800255e:	bd10      	pop	{r4, pc}

08002560 <memcpy>:
 8002560:	440a      	add	r2, r1
 8002562:	4291      	cmp	r1, r2
 8002564:	f100 33ff 	add.w	r3, r0, #4294967295
 8002568:	d100      	bne.n	800256c <memcpy+0xc>
 800256a:	4770      	bx	lr
 800256c:	b510      	push	{r4, lr}
 800256e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002572:	4291      	cmp	r1, r2
 8002574:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002578:	d1f9      	bne.n	800256e <memcpy+0xe>
 800257a:	bd10      	pop	{r4, pc}

0800257c <memmove>:
 800257c:	4288      	cmp	r0, r1
 800257e:	b510      	push	{r4, lr}
 8002580:	eb01 0402 	add.w	r4, r1, r2
 8002584:	d902      	bls.n	800258c <memmove+0x10>
 8002586:	4284      	cmp	r4, r0
 8002588:	4623      	mov	r3, r4
 800258a:	d807      	bhi.n	800259c <memmove+0x20>
 800258c:	1e43      	subs	r3, r0, #1
 800258e:	42a1      	cmp	r1, r4
 8002590:	d008      	beq.n	80025a4 <memmove+0x28>
 8002592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002596:	f803 2f01 	strb.w	r2, [r3, #1]!
 800259a:	e7f8      	b.n	800258e <memmove+0x12>
 800259c:	4601      	mov	r1, r0
 800259e:	4402      	add	r2, r0
 80025a0:	428a      	cmp	r2, r1
 80025a2:	d100      	bne.n	80025a6 <memmove+0x2a>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80025aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80025ae:	e7f7      	b.n	80025a0 <memmove+0x24>

080025b0 <_free_r>:
 80025b0:	b538      	push	{r3, r4, r5, lr}
 80025b2:	4605      	mov	r5, r0
 80025b4:	2900      	cmp	r1, #0
 80025b6:	d043      	beq.n	8002640 <_free_r+0x90>
 80025b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025bc:	1f0c      	subs	r4, r1, #4
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bfb8      	it	lt
 80025c2:	18e4      	addlt	r4, r4, r3
 80025c4:	f000 f8d0 	bl	8002768 <__malloc_lock>
 80025c8:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <_free_r+0x94>)
 80025ca:	6813      	ldr	r3, [r2, #0]
 80025cc:	4610      	mov	r0, r2
 80025ce:	b933      	cbnz	r3, 80025de <_free_r+0x2e>
 80025d0:	6063      	str	r3, [r4, #4]
 80025d2:	6014      	str	r4, [r2, #0]
 80025d4:	4628      	mov	r0, r5
 80025d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025da:	f000 b8cb 	b.w	8002774 <__malloc_unlock>
 80025de:	42a3      	cmp	r3, r4
 80025e0:	d90a      	bls.n	80025f8 <_free_r+0x48>
 80025e2:	6821      	ldr	r1, [r4, #0]
 80025e4:	1862      	adds	r2, r4, r1
 80025e6:	4293      	cmp	r3, r2
 80025e8:	bf01      	itttt	eq
 80025ea:	681a      	ldreq	r2, [r3, #0]
 80025ec:	685b      	ldreq	r3, [r3, #4]
 80025ee:	1852      	addeq	r2, r2, r1
 80025f0:	6022      	streq	r2, [r4, #0]
 80025f2:	6063      	str	r3, [r4, #4]
 80025f4:	6004      	str	r4, [r0, #0]
 80025f6:	e7ed      	b.n	80025d4 <_free_r+0x24>
 80025f8:	461a      	mov	r2, r3
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	b10b      	cbz	r3, 8002602 <_free_r+0x52>
 80025fe:	42a3      	cmp	r3, r4
 8002600:	d9fa      	bls.n	80025f8 <_free_r+0x48>
 8002602:	6811      	ldr	r1, [r2, #0]
 8002604:	1850      	adds	r0, r2, r1
 8002606:	42a0      	cmp	r0, r4
 8002608:	d10b      	bne.n	8002622 <_free_r+0x72>
 800260a:	6820      	ldr	r0, [r4, #0]
 800260c:	4401      	add	r1, r0
 800260e:	1850      	adds	r0, r2, r1
 8002610:	4283      	cmp	r3, r0
 8002612:	6011      	str	r1, [r2, #0]
 8002614:	d1de      	bne.n	80025d4 <_free_r+0x24>
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4401      	add	r1, r0
 800261c:	6011      	str	r1, [r2, #0]
 800261e:	6053      	str	r3, [r2, #4]
 8002620:	e7d8      	b.n	80025d4 <_free_r+0x24>
 8002622:	d902      	bls.n	800262a <_free_r+0x7a>
 8002624:	230c      	movs	r3, #12
 8002626:	602b      	str	r3, [r5, #0]
 8002628:	e7d4      	b.n	80025d4 <_free_r+0x24>
 800262a:	6820      	ldr	r0, [r4, #0]
 800262c:	1821      	adds	r1, r4, r0
 800262e:	428b      	cmp	r3, r1
 8002630:	bf01      	itttt	eq
 8002632:	6819      	ldreq	r1, [r3, #0]
 8002634:	685b      	ldreq	r3, [r3, #4]
 8002636:	1809      	addeq	r1, r1, r0
 8002638:	6021      	streq	r1, [r4, #0]
 800263a:	6063      	str	r3, [r4, #4]
 800263c:	6054      	str	r4, [r2, #4]
 800263e:	e7c9      	b.n	80025d4 <_free_r+0x24>
 8002640:	bd38      	pop	{r3, r4, r5, pc}
 8002642:	bf00      	nop
 8002644:	20000094 	.word	0x20000094

08002648 <_malloc_r>:
 8002648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264a:	1ccd      	adds	r5, r1, #3
 800264c:	f025 0503 	bic.w	r5, r5, #3
 8002650:	3508      	adds	r5, #8
 8002652:	2d0c      	cmp	r5, #12
 8002654:	bf38      	it	cc
 8002656:	250c      	movcc	r5, #12
 8002658:	2d00      	cmp	r5, #0
 800265a:	4606      	mov	r6, r0
 800265c:	db01      	blt.n	8002662 <_malloc_r+0x1a>
 800265e:	42a9      	cmp	r1, r5
 8002660:	d903      	bls.n	800266a <_malloc_r+0x22>
 8002662:	230c      	movs	r3, #12
 8002664:	6033      	str	r3, [r6, #0]
 8002666:	2000      	movs	r0, #0
 8002668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800266a:	f000 f87d 	bl	8002768 <__malloc_lock>
 800266e:	4921      	ldr	r1, [pc, #132]	; (80026f4 <_malloc_r+0xac>)
 8002670:	680a      	ldr	r2, [r1, #0]
 8002672:	4614      	mov	r4, r2
 8002674:	b99c      	cbnz	r4, 800269e <_malloc_r+0x56>
 8002676:	4f20      	ldr	r7, [pc, #128]	; (80026f8 <_malloc_r+0xb0>)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	b923      	cbnz	r3, 8002686 <_malloc_r+0x3e>
 800267c:	4621      	mov	r1, r4
 800267e:	4630      	mov	r0, r6
 8002680:	f000 f862 	bl	8002748 <_sbrk_r>
 8002684:	6038      	str	r0, [r7, #0]
 8002686:	4629      	mov	r1, r5
 8002688:	4630      	mov	r0, r6
 800268a:	f000 f85d 	bl	8002748 <_sbrk_r>
 800268e:	1c43      	adds	r3, r0, #1
 8002690:	d123      	bne.n	80026da <_malloc_r+0x92>
 8002692:	230c      	movs	r3, #12
 8002694:	4630      	mov	r0, r6
 8002696:	6033      	str	r3, [r6, #0]
 8002698:	f000 f86c 	bl	8002774 <__malloc_unlock>
 800269c:	e7e3      	b.n	8002666 <_malloc_r+0x1e>
 800269e:	6823      	ldr	r3, [r4, #0]
 80026a0:	1b5b      	subs	r3, r3, r5
 80026a2:	d417      	bmi.n	80026d4 <_malloc_r+0x8c>
 80026a4:	2b0b      	cmp	r3, #11
 80026a6:	d903      	bls.n	80026b0 <_malloc_r+0x68>
 80026a8:	6023      	str	r3, [r4, #0]
 80026aa:	441c      	add	r4, r3
 80026ac:	6025      	str	r5, [r4, #0]
 80026ae:	e004      	b.n	80026ba <_malloc_r+0x72>
 80026b0:	6863      	ldr	r3, [r4, #4]
 80026b2:	42a2      	cmp	r2, r4
 80026b4:	bf0c      	ite	eq
 80026b6:	600b      	streq	r3, [r1, #0]
 80026b8:	6053      	strne	r3, [r2, #4]
 80026ba:	4630      	mov	r0, r6
 80026bc:	f000 f85a 	bl	8002774 <__malloc_unlock>
 80026c0:	f104 000b 	add.w	r0, r4, #11
 80026c4:	1d23      	adds	r3, r4, #4
 80026c6:	f020 0007 	bic.w	r0, r0, #7
 80026ca:	1ac2      	subs	r2, r0, r3
 80026cc:	d0cc      	beq.n	8002668 <_malloc_r+0x20>
 80026ce:	1a1b      	subs	r3, r3, r0
 80026d0:	50a3      	str	r3, [r4, r2]
 80026d2:	e7c9      	b.n	8002668 <_malloc_r+0x20>
 80026d4:	4622      	mov	r2, r4
 80026d6:	6864      	ldr	r4, [r4, #4]
 80026d8:	e7cc      	b.n	8002674 <_malloc_r+0x2c>
 80026da:	1cc4      	adds	r4, r0, #3
 80026dc:	f024 0403 	bic.w	r4, r4, #3
 80026e0:	42a0      	cmp	r0, r4
 80026e2:	d0e3      	beq.n	80026ac <_malloc_r+0x64>
 80026e4:	1a21      	subs	r1, r4, r0
 80026e6:	4630      	mov	r0, r6
 80026e8:	f000 f82e 	bl	8002748 <_sbrk_r>
 80026ec:	3001      	adds	r0, #1
 80026ee:	d1dd      	bne.n	80026ac <_malloc_r+0x64>
 80026f0:	e7cf      	b.n	8002692 <_malloc_r+0x4a>
 80026f2:	bf00      	nop
 80026f4:	20000094 	.word	0x20000094
 80026f8:	20000098 	.word	0x20000098

080026fc <_realloc_r>:
 80026fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fe:	4607      	mov	r7, r0
 8002700:	4614      	mov	r4, r2
 8002702:	460e      	mov	r6, r1
 8002704:	b921      	cbnz	r1, 8002710 <_realloc_r+0x14>
 8002706:	4611      	mov	r1, r2
 8002708:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800270c:	f7ff bf9c 	b.w	8002648 <_malloc_r>
 8002710:	b922      	cbnz	r2, 800271c <_realloc_r+0x20>
 8002712:	f7ff ff4d 	bl	80025b0 <_free_r>
 8002716:	4625      	mov	r5, r4
 8002718:	4628      	mov	r0, r5
 800271a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800271c:	f000 f830 	bl	8002780 <_malloc_usable_size_r>
 8002720:	42a0      	cmp	r0, r4
 8002722:	d20f      	bcs.n	8002744 <_realloc_r+0x48>
 8002724:	4621      	mov	r1, r4
 8002726:	4638      	mov	r0, r7
 8002728:	f7ff ff8e 	bl	8002648 <_malloc_r>
 800272c:	4605      	mov	r5, r0
 800272e:	2800      	cmp	r0, #0
 8002730:	d0f2      	beq.n	8002718 <_realloc_r+0x1c>
 8002732:	4631      	mov	r1, r6
 8002734:	4622      	mov	r2, r4
 8002736:	f7ff ff13 	bl	8002560 <memcpy>
 800273a:	4631      	mov	r1, r6
 800273c:	4638      	mov	r0, r7
 800273e:	f7ff ff37 	bl	80025b0 <_free_r>
 8002742:	e7e9      	b.n	8002718 <_realloc_r+0x1c>
 8002744:	4635      	mov	r5, r6
 8002746:	e7e7      	b.n	8002718 <_realloc_r+0x1c>

08002748 <_sbrk_r>:
 8002748:	b538      	push	{r3, r4, r5, lr}
 800274a:	2300      	movs	r3, #0
 800274c:	4d05      	ldr	r5, [pc, #20]	; (8002764 <_sbrk_r+0x1c>)
 800274e:	4604      	mov	r4, r0
 8002750:	4608      	mov	r0, r1
 8002752:	602b      	str	r3, [r5, #0]
 8002754:	f7fd ff2a 	bl	80005ac <_sbrk>
 8002758:	1c43      	adds	r3, r0, #1
 800275a:	d102      	bne.n	8002762 <_sbrk_r+0x1a>
 800275c:	682b      	ldr	r3, [r5, #0]
 800275e:	b103      	cbz	r3, 8002762 <_sbrk_r+0x1a>
 8002760:	6023      	str	r3, [r4, #0]
 8002762:	bd38      	pop	{r3, r4, r5, pc}
 8002764:	2000012c 	.word	0x2000012c

08002768 <__malloc_lock>:
 8002768:	4801      	ldr	r0, [pc, #4]	; (8002770 <__malloc_lock+0x8>)
 800276a:	f000 b811 	b.w	8002790 <__retarget_lock_acquire_recursive>
 800276e:	bf00      	nop
 8002770:	20000134 	.word	0x20000134

08002774 <__malloc_unlock>:
 8002774:	4801      	ldr	r0, [pc, #4]	; (800277c <__malloc_unlock+0x8>)
 8002776:	f000 b80c 	b.w	8002792 <__retarget_lock_release_recursive>
 800277a:	bf00      	nop
 800277c:	20000134 	.word	0x20000134

08002780 <_malloc_usable_size_r>:
 8002780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002784:	1f18      	subs	r0, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	bfbc      	itt	lt
 800278a:	580b      	ldrlt	r3, [r1, r0]
 800278c:	18c0      	addlt	r0, r0, r3
 800278e:	4770      	bx	lr

08002790 <__retarget_lock_acquire_recursive>:
 8002790:	4770      	bx	lr

08002792 <__retarget_lock_release_recursive>:
 8002792:	4770      	bx	lr

08002794 <_init>:
 8002794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002796:	bf00      	nop
 8002798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279a:	bc08      	pop	{r3}
 800279c:	469e      	mov	lr, r3
 800279e:	4770      	bx	lr

080027a0 <_fini>:
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	bf00      	nop
 80027a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a6:	bc08      	pop	{r3}
 80027a8:	469e      	mov	lr, r3
 80027aa:	4770      	bx	lr
